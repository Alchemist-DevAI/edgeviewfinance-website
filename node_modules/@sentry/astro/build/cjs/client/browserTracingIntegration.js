Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });

const browser = require('@sentry/browser');
const core = require('@sentry/core');
const debugBuild = require('../debug-build.js');

/**
 * Returns the value of a meta-tag
 */
function getMetaContent(metaName) {
  const optionalDocument = browser.WINDOW.document ;
  const metaTag = optionalDocument?.querySelector(`meta[name=${metaName}]`);
  return metaTag?.getAttribute('content') || undefined;
}

/**
 * A custom browser tracing integrations for Astro.
 */
function browserTracingIntegration(
  options = {},
) {
  const integration = browser.browserTracingIntegration({ ...options, instrumentPageLoad: false });

  return {
    ...integration,
    afterAllSetup(client) {
      // Original integration afterAllSetup call
      integration.afterAllSetup?.(client);

      if (browser.WINDOW.location) {
        if (options.instrumentPageLoad != false) {
          const origin = core.browserPerformanceTimeOrigin();

          const { name, source } = getPageloadSpanName();

          browser.startBrowserTracingPageLoadSpan(client, {
            name,
            // pageload should always start at timeOrigin (and needs to be in s, not ms)
            startTime: origin ? origin / 1000 : undefined,
            attributes: {
              [core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: source,
              [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.pageload.astro',
            },
          });
        }
      }
    },
  };
}

function getPageloadSpanName() {
  try {
    const routeNameFromMetaTags = getMetaContent('sentry-route-name');
    if (routeNameFromMetaTags) {
      const decodedRouteName = decodeURIComponent(routeNameFromMetaTags);

      debugBuild.DEBUG_BUILD && core.debug.log(`[Tracing] Using route name from Sentry HTML meta-tag: ${decodedRouteName}`);

      return {
        name: decodedRouteName,
        source: 'route',
      };
    }
  } catch {
    // fail silently if decoding or reading the meta tag fails
  }
  return {
    name: browser.WINDOW.location.pathname,
    source: 'url',
  };
}

exports.browserTracingIntegration = browserTracingIntegration;
//# sourceMappingURL=browserTracingIntegration.js.map
