---
export interface Props {
  questionNumber: number;
  questionText: string;
  questionType?: 'radio' | 'checkbox';
  options: {
    value: string;
    label: string;
    description?: string;
  }[];
  selectedValue?: string;
  isChecklist?: boolean;
  checklistItems?: string[];
  checkedCount?: number;
}

const { 
  questionNumber, 
  questionText,
  questionType = 'radio', 
  options, 
  selectedValue, 
  isChecklist = false,
  checklistItems = [],
  checkedCount = 0
} = Astro.props;
---

<div class="bg-white border border-gray-200 shadow-sm p-4 sm:p-6">
  <div class="text-sm font-medium text-orange-500 uppercase tracking-wider">
    QUESTION {questionNumber} OF 5
  </div>
  <h2 class="text-lg sm:text-xl font-semibold text-gray-900 mt-2 mb-4">
    {questionText}
  </h2>

  {questionType === 'checkbox' ? (
    <div>
      <div class="space-y-2 mb-4">
        {options.map((option) => (
          <label class="flex items-start cursor-pointer group">
            <input
              type="checkbox"
              name={`question-${questionNumber}-checkbox`}
              value={option.value}
              class="mt-1 h-5 w-5 text-orange-500 border-gray-300 focus:ring-orange-500"
            />
            <div class="ml-3">
              <span class="text-gray-700 group-hover:text-gray-900 font-medium">{option.label}</span>
              {option.description && (
                <div class="text-sm text-gray-500 mt-1">{option.description}</div>
              )}
            </div>
          </label>
        ))}
      </div>
      <div class="text-sm text-gray-500 mb-6">
        Items checked: <span id={"checked-count-" + questionNumber}>0</span> / {options.length}
      </div>
    </div>
  ) : (
    <div class="space-y-3">
      {options.map((option) => (
        <label class="block cursor-pointer group">
          <div class={`
            border-2 p-3 transition-all hover:transform hover:translate-x-1
            ${selectedValue === option.value 
              ? 'border-orange-500 bg-orange-50' 
              : 'border-gray-200 hover:border-orange-500 hover:bg-orange-50'}
          `}>
            <div class="flex items-start">
              <input
                type="radio"
                name={`question-${questionNumber}`}
                value={option.value}
                checked={selectedValue === option.value}
                class="mt-1 h-4 w-4 text-orange-500 focus:ring-orange-500 border-gray-300"
              />
              <div class="ml-3 flex-1">
                <div class="font-medium text-gray-700">{option.label}</div>
                {option.description && (
                  <div class="text-sm text-gray-500 mt-1">{option.description}</div>
                )}
              </div>
              {selectedValue === option.value && (
                <svg class="w-6 h-6 text-orange-500 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
              )}
            </div>
          </div>
        </label>
      ))}
    </div>
  )}
  
</div>

{questionType === 'checkbox' && (
  <script type="text/javascript">
    // Update checkbox count for question
    const questionNum = {questionNumber};
    const checkboxes = document.querySelectorAll(`input[name="question-${questionNum}-checkbox"]`);
    const countSpan = document.getElementById(`checked-count-${questionNum}`);
    
    function updateCount() {
      const checkedCount = document.querySelectorAll(`input[name="question-${questionNum}-checkbox"]:checked`).length;
      if (countSpan) countSpan.textContent = checkedCount;
    }
    
    checkboxes.forEach(checkbox => {
      checkbox.addEventListener('change', updateCount);
    });
  </script>
)}

