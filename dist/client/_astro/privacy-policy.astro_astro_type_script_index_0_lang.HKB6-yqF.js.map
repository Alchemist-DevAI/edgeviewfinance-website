{"version":3,"file":"privacy-policy.astro_astro_type_script_index_0_lang.HKB6-yqF.js","sources":["../../../src/pages/privacy-policy.astro?astro&type=script&index=0&lang.ts"],"sourcesContent":["        // Smooth scroll for anchor links\n        document.querySelectorAll('a[href^=\"#\"]').forEach(anchor => {\n            anchor.addEventListener('click', function (e) {\n                e.preventDefault();\n                const target = document.querySelector(this.getAttribute('href'));\n                if (target) {\n                    target.scrollIntoView({\n                        behavior: 'smooth',\n                        block: 'start'\n                    });\n                }\n            });\n        });\n\n        // Toggle expand functionality - make it globally available\n        window.toggleExpand = function(expandId) {\n            const expandContent = document.getElementById(expandId);\n            const iconId = expandId.split('-')[0] + '-icon';\n            const icon = document.getElementById(iconId);\n            \n            if (expandContent && icon) {\n                if (expandContent.classList.contains('hidden')) {\n                    expandContent.classList.remove('hidden');\n                    expandContent.style.animation = 'slideDown 0.3s ease-out';\n                    icon.style.transform = 'rotate(180deg)';\n                } else {\n                    expandContent.classList.add('hidden');\n                    icon.style.transform = 'rotate(0deg)';\n                }\n            }\n        }\n    \n\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"],"names":["anchor","e","target","expandId","expandContent","iconId","icon"],"mappings":"uiBA4mBQ,SAAS,iBAAiB,cAAc,EAAE,QAAQA,GAAU,CACxDA,EAAO,iBAAiB,QAAS,SAAUC,EAAG,CAC1CA,EAAE,eAAA,EACF,MAAMC,EAAS,SAAS,cAAc,KAAK,aAAa,MAAM,CAAC,EAC3DA,GACAA,EAAO,eAAe,CAClB,SAAU,SACV,MAAO,QACV,CAET,CAAC,CACL,CAAC,EAGD,OAAO,aAAe,SAASC,EAAU,CACrC,MAAMC,EAAgB,SAAS,eAAeD,CAAQ,EAChDE,EAASF,EAAS,MAAM,GAAG,EAAE,CAAC,EAAI,QAClCG,EAAO,SAAS,eAAeD,CAAM,EAEvCD,GAAiBE,IACbF,EAAc,UAAU,SAAS,QAAQ,GACzCA,EAAc,UAAU,OAAO,QAAQ,EACvCA,EAAc,MAAM,UAAY,0BAChCE,EAAK,MAAM,UAAY,mBAEvBF,EAAc,UAAU,IAAI,QAAQ,EACpCE,EAAK,MAAM,UAAY,gBAGnC"}