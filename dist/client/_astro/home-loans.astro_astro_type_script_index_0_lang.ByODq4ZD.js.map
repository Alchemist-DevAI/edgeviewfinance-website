{"version":3,"file":"home-loans.astro_astro_type_script_index_0_lang.ByODq4ZD.js","sources":["../../../src/pages/home-loans.astro?astro&type=script&index=0&lang.ts"],"sourcesContent":["  // FAQ Accordion functionality\n  document.addEventListener('DOMContentLoaded', () => {\n    const faqQuestions = document.querySelectorAll('.faq-question');\n\n    faqQuestions.forEach(question => {\n      question.addEventListener('click', () => {\n        const answer = question.nextElementSibling as HTMLElement;\n        const icon = question.querySelector('.faq-icon') as HTMLElement;\n        const isOpen = !answer.classList.contains('hidden');\n\n        // Close all other FAQs\n        document.querySelectorAll('.faq-answer').forEach(item => {\n          if (item !== answer) {\n            item.classList.add('hidden');\n          }\n        });\n\n        document.querySelectorAll('.faq-icon').forEach(item => {\n          if (item !== icon) {\n            item.classList.remove('rotate-180');\n          }\n        });\n\n        // Toggle current FAQ\n        if (isOpen) {\n          answer.classList.add('hidden');\n          icon.classList.remove('rotate-180');\n        } else {\n          answer.classList.remove('hidden');\n          icon.classList.add('rotate-180');\n        }\n      });\n    });\n  });\n\n  // Contact Form Handling (placeholder - integrate with actual backend)\n  const contactForm = document.getElementById('home-loan-contact-form');\n  if (contactForm) {\n    contactForm.addEventListener('submit', (e) => {\n      e.preventDefault();\n      // TODO: Integrate with actual form submission backend\n      alert('Thank you! Your enquiry has been submitted. We will contact you within 4 hours during business hours.');\n      contactForm.reset();\n    });\n  }\n\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"],"names":["question","answer","icon","isOpen","item","contactForm"],"mappings":"CAixEE,UAAA,CAAA,GAAA,CAAA,IAAA,EAAA,OAAA,OAAA,IAAA,OAAA,OAAA,OAAA,IAAA,OAAA,OAAA,WAAA,IAAA,WAAA,OAAA,KAAA,IAAA,KAAA,CAAA,EAAA,EAAA,eAAA,CAAA,GAAA,0CAAA,CAAA,MAAA,CAAA,CAAA,GAAA,EAAA,GAAA,EAAA,UAAA,CAAA,IAAA,EAAA,OAAA,OAAA,IAAA,OAAA,OAAA,OAAA,IAAA,OAAA,OAAA,WAAA,IAAA,WAAA,OAAA,KAAA,IAAA,KAAA,CAAA,EAAA,EAAA,IAAA,EAAA,QAAA,MAAA,IAAA,EAAA,gBAAA,EAAA,iBAAA,CAAA,EAAA,EAAA,gBAAA,CAAA,EAAA,uCAAA,EAAA,yBAAA,mDAAA,GAAA,CAAA,MAAA,CAAA,CAAA,SAAS,iBAAiB,mBAAoB,IAAM,CAC7B,SAAS,iBAAiB,eAAe,EAEjD,QAAQA,GAAY,CAC/BA,EAAS,iBAAiB,QAAS,IAAM,CACvC,MAAMC,EAASD,EAAS,mBAClBE,EAAOF,EAAS,cAAc,WAAW,EACzCG,EAAS,CAACF,EAAO,UAAU,SAAS,QAAQ,EAGlD,SAAS,iBAAiB,aAAa,EAAE,QAAQG,GAAQ,CACnDA,IAASH,GACXG,EAAK,UAAU,IAAI,QAAQ,CAE/B,CAAC,EAED,SAAS,iBAAiB,WAAW,EAAE,QAAQA,GAAQ,CACjDA,IAASF,GACXE,EAAK,UAAU,OAAO,YAAY,CAEtC,CAAC,EAGGD,GACFF,EAAO,UAAU,IAAI,QAAQ,EAC7BC,EAAK,UAAU,OAAO,YAAY,IAElCD,EAAO,UAAU,OAAO,QAAQ,EAChCC,EAAK,UAAU,IAAI,YAAY,EAEnC,CAAC,CACH,CAAC,CACH,CAAC,EAGD,MAAMG,EAAc,SAAS,eAAe,wBAAwB,EAChEA,GACFA,EAAY,iBAAiB,SAAW,GAAM,CAC5C,EAAE,eAAA,EAEF,MAAM,uGAAuG,EAC7GA,EAAY,MAAA,CACd,CAAC"}