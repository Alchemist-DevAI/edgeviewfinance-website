{"version":3,"file":"_slug_.astro_astro_type_script_index_0_lang.Y_f-RDcT.js","sources":["../../../src/pages/blog/[slug].astro?astro&type=script&index=0&lang.ts"],"sourcesContent":["  document.addEventListener('DOMContentLoaded', function() {\r\n    // Handle sidebar newsletter form\r\n    const sidebarForm = document.querySelector('.sidebar-newsletter-form') as HTMLFormElement;\r\n    \r\n    if (sidebarForm) {\r\n      sidebarForm.addEventListener('submit', async function(e) {\r\n        e.preventDefault();\r\n        \r\n        const emailInput = this.querySelector('.sidebar-newsletter-input') as HTMLInputElement;\r\n        const submitButton = this.querySelector('.sidebar-newsletter-button') as HTMLButtonElement;\r\n        \r\n        if (!emailInput || !submitButton) return;\r\n        \r\n        const email = emailInput.value.trim();\r\n        \r\n        if (!email) {\r\n          alert('Please enter your email address.');\r\n          return;\r\n        }\r\n        \r\n        // Simple email validation\r\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n        if (!emailRegex.test(email)) {\r\n          alert('Please enter a valid email address.');\r\n          return;\r\n        }\r\n        \r\n        // Disable button and show loading state\r\n        const originalText = submitButton.textContent;\r\n        submitButton.disabled = true;\r\n        submitButton.textContent = 'Subscribing...';\r\n        \r\n        // Get the current page path for source tracking\r\n        const currentPath = window.location.pathname;\r\n        \r\n        try {\r\n          const response = await fetch('/api/newsletter-subscribe', {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n              email: email,\r\n              source: currentPath + ' (sidebar)'\r\n            })\r\n          });\r\n\r\n          const result = await response.json();\r\n\r\n          if (result.success) {\r\n            alert('Thank you for subscribing! You\\'ll receive your first newsletter soon.');\r\n            emailInput.value = '';\r\n          } else {\r\n            alert(result.error || 'Something went wrong. Please try again.');\r\n          }\r\n        } catch (error) {\r\n          console.error('Newsletter subscription error:', error);\r\n          alert('Unable to subscribe at this time. Please try again later.');\r\n        } finally {\r\n          submitButton.disabled = false;\r\n          submitButton.textContent = originalText;\r\n        }\r\n      });\r\n    }\r\n  });\n\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"],"names":["sidebarForm","e","emailInput","submitButton","email","originalText","currentPath","result","error"],"mappings":"CAoeE,UAAA,CAAA,GAAA,CAAA,IAAA,EAAA,OAAA,OAAA,IAAA,OAAA,OAAA,OAAA,IAAA,OAAA,OAAA,WAAA,IAAA,WAAA,OAAA,KAAA,IAAA,KAAA,CAAA,EAAA,EAAA,eAAA,CAAA,GAAA,0CAAA,CAAA,MAAA,CAAA,CAAA,GAAA,EAAA,GAAA,EAAA,UAAA,CAAA,IAAA,EAAA,OAAA,OAAA,IAAA,OAAA,OAAA,OAAA,IAAA,OAAA,OAAA,WAAA,IAAA,WAAA,OAAA,KAAA,IAAA,KAAA,CAAA,EAAA,EAAA,IAAA,EAAA,QAAA,MAAA,IAAA,EAAA,gBAAA,EAAA,iBAAA,CAAA,EAAA,EAAA,gBAAA,CAAA,EAAA,uCAAA,EAAA,yBAAA,mDAAA,GAAA,CAAA,MAAA,CAAA,CAAA,SAAS,iBAAiB,mBAAoB,UAAW,CAEvD,MAAMA,EAAc,SAAS,cAAc,0BAA0B,EAEjEA,GACFA,EAAY,iBAAiB,SAAU,eAAeC,EAAG,CACvDA,EAAE,eAAA,EAEF,MAAMC,EAAa,KAAK,cAAc,2BAA2B,EAC3DC,EAAe,KAAK,cAAc,4BAA4B,EAEpE,GAAI,CAACD,GAAc,CAACC,EAAc,OAElC,MAAMC,EAAQF,EAAW,MAAM,KAAA,EAE/B,GAAI,CAACE,EAAO,CACV,MAAM,kCAAkC,EACxC,MACF,CAIA,GAAI,CADe,6BACH,KAAKA,CAAK,EAAG,CAC3B,MAAM,qCAAqC,EAC3C,MACF,CAGA,MAAMC,EAAeF,EAAa,YAClCA,EAAa,SAAW,GACxBA,EAAa,YAAc,iBAG3B,MAAMG,EAAc,OAAO,SAAS,SAEpC,GAAI,CAYF,MAAMC,EAAS,MAXE,MAAM,MAAM,4BAA6B,CACxD,OAAQ,OACR,QAAS,CACP,eAAgB,kBAClB,EACA,KAAM,KAAK,UAAU,CACnB,MAAAH,EACA,OAAQE,EAAc,aACvB,EACF,GAE6B,KAAA,EAE1BC,EAAO,SACT,MAAM,uEAAwE,EAC9EL,EAAW,MAAQ,IAEnB,MAAMK,EAAO,OAAS,yCAAyC,CAEnE,OAASC,EAAO,CACd,QAAQ,MAAM,iCAAkCA,CAAK,EACrD,MAAM,2DAA2D,CACnE,QAAA,CACEL,EAAa,SAAW,GACxBA,EAAa,YAAcE,CAC7B,CACF,CAAC,CAEL,CAAC"}