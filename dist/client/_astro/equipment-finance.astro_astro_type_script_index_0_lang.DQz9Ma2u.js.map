{"version":3,"file":"equipment-finance.astro_astro_type_script_index_0_lang.DQz9Ma2u.js","sources":["../../../src/pages/equipment-finance.astro?astro&type=script&index=0&lang.ts"],"sourcesContent":["    // FAQ Accordion functionality\r\n    document.querySelectorAll('.faq-toggle').forEach(button => {\r\n      button.addEventListener('click', () => {\r\n        const content = button.nextElementSibling;\r\n        const icon = button.querySelector('svg');\r\n        \r\n        content.classList.toggle('hidden');\r\n        icon.classList.toggle('rotate-180');\r\n      });\r\n    });\r\n  \n\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"],"names":["button","content","icon"],"mappings":"uiBAqeI,SAAS,iBAAiB,aAAa,EAAE,QAAQA,GAAU,CACzDA,EAAO,iBAAiB,QAAS,IAAM,CACrC,MAAMC,EAAUD,EAAO,mBACjBE,EAAOF,EAAO,cAAc,KAAK,EAEvCC,EAAQ,UAAU,OAAO,QAAQ,EACjCC,EAAK,UAAU,OAAO,YAAY,CACpC,CAAC,CACH,CAAC"}