{"version":3,"file":"credit-guide.astro_astro_type_script_index_0_lang.Da-XmpV5.js","sources":["../../../src/pages/credit-guide.astro?astro&type=script&index=0&lang.ts"],"sourcesContent":["  // Smooth scroll for anchor links\r\n  document.querySelectorAll('a[href^=\"#\"]').forEach(anchor => {\r\n    anchor.addEventListener('click', function (e) {\r\n      e.preventDefault();\r\n      const target = document.querySelector(this.getAttribute('href'));\r\n      if (target) {\r\n        target.scrollIntoView({\r\n          behavior: 'smooth',\r\n          block: 'start'\r\n        });\r\n      }\r\n    });\r\n  });\n\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyAidmVyc2lvbiI6IDMsICJzb3VyY2VzIjogWyIvbW50L2MvR2l0SHViIFJlcG9zL2V2ZmJzLXYyLXN1cGFiYXNlLzQtZGV2ZWxvcG1lbnQtaW5mcmFzdHJ1Y3R1cmUvZXZmYnMtYWdlbmN5MTEtcHVyZS9zcmMvcGFnZXMvY3JlZGl0LWd1aWRlLmFzdHJvIl0sICJzb3VyY2VzQ29udGVudCI6IFsiLS0tXHJcbmltcG9ydCBMYXlvdXQgZnJvbSBcIi4uL2xheW91dC9MYXlvdXQuYXN0cm9cIjtcclxuaW1wb3J0IFNlY3VyaXR5U3VtbWFyeUJveCBmcm9tIFwiLi4vY29tcG9uZW50cy9TZWN1cml0eVN1bW1hcnlCb3guYXN0cm9cIjtcclxuXHJcbi8vIFRydXN0IGJhZGdlcyBkYXRhIGZvciBoZXJvIHNlY3Rpb25cclxuY29uc3QgdHJ1c3RCYWRnZXMgPSBbXHJcbiAge1xyXG4gICAgdGl0bGU6IFwiTGljZW5zZWQgU3BlY2lhbGlzdFwiLFxyXG4gICAgc3VidGl0bGU6IFwiQUNMIDQ1OTI4N1wiLFxyXG4gICAgZGVzY3JpcHRpb246IFwiQXVzdHJhbGlhbiBDcmVkaXQgTGljZW5jZSBIb2xkZXJcIixcclxuICAgIGljb246IFwic2hpZWxkXCJcclxuICB9LFxyXG4gIHtcclxuICAgIHRpdGxlOiBcIkV4cGVyaWVuY2VcIixcclxuICAgIHN1YnRpdGxlOiBcIjIwKyBZZWFyc1wiLFxyXG4gICAgZGVzY3JpcHRpb246IFwiQmFua2luZyBcdTAwMjYgRmluYW5jZSBJbmR1c3RyeSBFeHBlcmllbmNlXCIsXHJcbiAgICBpY29uOiBcImV4cGVyaWVuY2VcIlxyXG4gIH0sXHJcbiAge1xyXG4gICAgdGl0bGU6IFwiTGVuZGVyIEFjY2Vzc1wiLFxyXG4gICAgc3VidGl0bGU6IFwiNDArIExlbmRlcnNcIixcclxuICAgIGRlc2NyaXB0aW9uOiBcIlNwZWNpYWxpc3QgQnVzaW5lc3MgXHUwMDI2IEhvbWUgTG9hbiBQYW5lbFwiLFxyXG4gICAgaWNvbjogXCJuZXR3b3JrXCJcclxuICB9LFxyXG4gIHtcclxuICAgIHRpdGxlOiBcIkNsaWVudCBQcm90ZWN0aW9uXCIsXHJcbiAgICBzdWJ0aXRsZTogXCJCZXN0IEludGVyZXN0IER1dHlcIixcclxuICAgIGRlc2NyaXB0aW9uOiBcIllvdXIgSW50ZXJlc3RzIENvbWUgRmlyc3QsIEFsd2F5c1wiLFxyXG4gICAgaWNvbjogXCJwcm90ZWN0aW9uXCJcclxuICB9XHJcbl07XHJcblxyXG4vLyBRdWljayBuYXZpZ2F0aW9uIGl0ZW1zXHJcbmNvbnN0IG5hdmlnYXRpb25JdGVtcyA9IFtcclxuICB7IHRleHQ6IFwiQWJvdXQgWW91ciBCcm9rZXJcIiwgaHJlZjogXCIjYWJvdXQtYnJva2VyXCIgfSxcclxuICB7IHRleHQ6IFwiT3VyIExlbmRlciBQYW5lbFwiLCBocmVmOiBcIiNsZW5kZXItcmVsYXRpb25zaGlwc1wiIH0sXHJcbiAgeyB0ZXh0OiBcIkZlZXMgXHUwMDI2IENvbW1pc3Npb25zXCIsIGhyZWY6IFwiI2ZlZXMtY29tbWlzc2lvbnNcIiB9LFxyXG4gIHsgdGV4dDogXCJZb3VyIFJpZ2h0cyBcdTAwMjYgUHJvdGVjdGlvbnNcIiwgaHJlZjogXCIjcmlnaHRzLXByb3RlY3Rpb25zXCIgfVxyXG5dO1xyXG5cclxuLy8gU3VtbWFyeSBib3ggY29udGVudFxyXG5jb25zdCBzdW1tYXJ5Q29udGVudCA9IHtcclxuICB0aXRsZTogXCJDcmVkaXQgR3VpZGUgU3VtbWFyeVwiLFxyXG4gIGl0ZW1zOiBbXHJcbiAgICBcIkNvbXBsZXRlIHRyYW5zcGFyZW5jeSBhYm91dCBob3cgd2Ugd29yayBhbmQgaG93IHdlJ3JlIHBhaWRcIixcclxuICAgIFwiWW91ciByaWdodHMgYW5kIHByb3RlY3Rpb25zIHVuZGVyIEF1c3RyYWxpYW4gQ3JlZGl0IExhd1wiLFxyXG4gICAgXCJPdXIgY29tbWl0bWVudCB0byBhY3QgaW4geW91ciBiZXN0IGludGVyZXN0cyBhdCBhbGwgdGltZXNcIixcclxuICAgIFwiQWNjZXNzIHRvIDQwKyBzcGVjaWFsaXN0IGxlbmRlcnMgdGhyb3VnaCBvdXIgcGFuZWwgcmVsYXRpb25zaGlwc1wiXHJcbiAgXVxyXG59O1xyXG4tLS1cclxuXHJcblx1MDAzY0xheW91dCBcclxuICB0aXRsZT1cIkNyZWRpdCBHdWlkZSB8IEVkZ2V2aWV3IEZpbmFuY2UgLSBBdXN0cmFsaWFuIENyZWRpdCBMaWNlbmNlIDQ1OTI4N1wiXHJcbiAgZGVzY3JpcHRpb249XCJPdXIgQ3JlZGl0IEd1aWRlIGV4cGxhaW5zIGhvdyB3ZSB3b3JrLCB3aG8gd2Ugd29yayB3aXRoLCBhbmQgaG93IHdlJ3JlIHBhaWQuIENvbXBsZXRlIHRyYW5zcGFyZW5jeSBhbmQgcmVndWxhdG9yeSBjb21wbGlhbmNlIGZvciB5b3VyIHBlYWNlIG9mIG1pbmQuXCJcclxuXHUwMDNlXHJcbiAgXHUwMDNjbWFpbiBjbGFzcz1cIm1haW4td3JhcHBlciByZWxhdGl2ZSBvdmVyZmxvdy1oaWRkZW5cIlx1MDAzZVxyXG5cclxuICAgIFx1MDAzYyEtLSBIZXJvIFNlY3Rpb24gLS1cdTAwM2VcclxuICAgIFx1MDAzY3NlY3Rpb24gY2xhc3M9XCJweS0xMiBtZDpweS0xNlwiXHUwMDNlXHJcbiAgICAgIFx1MDAzY2RpdiBjbGFzcz1cIm14LWF1dG8gbWF4LXctNnhsIHB4LTQgc206cHgtNiBsZzpweC04XCJcdTAwM2VcclxuICAgICAgICBcdTAwM2MhLS0gSGVybyBDb250ZW50IC0tXHUwMDNlXHJcbiAgICAgICAgXHUwMDNjZGl2IGNsYXNzPVwibXgtYXV0byBtYXgtdy00eGwgdGV4dC1jZW50ZXJcIlx1MDAzZVxyXG4gICAgICAgICAgXHUwMDNjaDEgY2xhc3M9XCJ0ZXh0LTV4bCBmb250LWJvbGQgdHJhY2tpbmctdGlnaHQgdGV4dC1zbGF0ZS05MDBcIlx1MDAzZVxyXG4gICAgICAgICAgICBIb3cgZG8gd2UgZW5zdXJlIHlvdXIgaW50ZXJlc3RzIGNvbWUgZmlyc3Q/XHJcbiAgICAgICAgICBcdTAwM2MvaDFcdTAwM2VcclxuICAgICAgICAgIFx1MDAzY3AgY2xhc3M9XCJteC1hdXRvIG10LTYgbWF4LXctM3hsIHRleHQteGwgbGVhZGluZy04IHRleHQtc2xhdGUtNjAwXCJcdTAwM2VcclxuICAgICAgICAgICAgT3VyIENyZWRpdCBHdWlkZSBleHBsYWlucyBleGFjdGx5IGhvdyB3ZSB3b3JrLCB3aG8gd2Ugd29yayB3aXRoLCBhbmQgaG93IHdlJ3JlIHBhaWQgLSBiZWNhdXNlIHRyYW5zcGFyZW5jeSBidWlsZHMgdHJ1c3QgaW4gZXZlcnkgYnVzaW5lc3MgcmVsYXRpb25zaGlwLlxyXG4gICAgICAgICAgXHUwMDNjL3BcdTAwM2VcclxuXHJcbiAgICAgICAgXHUwMDNjL2Rpdlx1MDAzZVxyXG5cclxuICAgICAgICBcdTAwM2MhLS0gVHJ1c3QgQmFkZ2VzIC0tXHUwMDNlXHJcbiAgICAgICAgXHUwMDNjZGl2IGNsYXNzPVwibXQtMTIgZ3JpZCBncmlkLWNvbHMtMSBnYXAtNiBzbTpncmlkLWNvbHMtMiBsZzpncmlkLWNvbHMtNFwiXHUwMDNlXHJcbiAgICAgICAgICB7dHJ1c3RCYWRnZXMubWFwKChiYWRnZSkgPVx1MDAzZSAoXHJcbiAgICAgICAgICAgIFx1MDAzY2RpdiBjbGFzcz1cInRydXN0LWJhZGdlIGJnLWdyZWVuLTUwIGJvcmRlciBib3JkZXItZ3JlZW4tNTAwIHJvdW5kZWQtbGcgc2hhZG93LXNtIHAtNCBmbGV4IGl0ZW1zLWNlbnRlciBnYXAtM1wiXHUwMDNlXHJcbiAgICAgICAgICAgICAgXHUwMDNjZGl2IGNsYXNzPVwiYmFkZ2UtaWNvbiB0ZXh0LWdyZWVuLTYwMFwiXHUwMDNlXHJcbiAgICAgICAgICAgICAgICB7YmFkZ2UuaWNvbiA9PT0gJ3NoaWVsZCcgXHUwMDI2XHUwMDI2IChcclxuICAgICAgICAgICAgICAgICAgXHUwMDNjc3ZnIGNsYXNzPVwidy02IGgtNlwiIGZpbGw9XCJub25lXCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgdmlld0JveD1cIjAgMCAyNCAyNFwiXHUwMDNlXHJcbiAgICAgICAgICAgICAgICAgICAgXHUwMDNjcGF0aCBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLWxpbmVqb2luPVwicm91bmRcIiBzdHJva2Utd2lkdGg9XCIyXCIgZD1cIk05IDEybDIgMiA0LTRtNS42MTgtNC4wMTZBMTEuOTU1IDExLjk1NSAwIDAxMTIgMi45NDRhMTEuOTU1IDExLjk1NSAwIDAxLTguNjE4IDMuMDRBMTIuMDIgMTIuMDIgMCAwMDMgOWMwIDUuNTkxIDMuODI0IDEwLjI5IDkgMTEuNjIyIDUuMTc2LTEuMzMyIDktNi4wMyA5LTExLjYyMiAwLTEuMDQyLS4xMzMtMi4wNTItLjM4Mi0zLjAxNnpcIiAvXHUwMDNlXHJcbiAgICAgICAgICAgICAgICAgIFx1MDAzYy9zdmdcdTAwM2VcclxuICAgICAgICAgICAgICAgICl9XHJcbiAgICAgICAgICAgICAgICB7YmFkZ2UuaWNvbiA9PT0gJ2V4cGVyaWVuY2UnIFx1MDAyNlx1MDAyNiAoXHJcbiAgICAgICAgICAgICAgICAgIFx1MDAzY3N2ZyBjbGFzcz1cInctNiBoLTZcIiBmaWxsPVwibm9uZVwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIlx1MDAzZVxyXG4gICAgICAgICAgICAgICAgICAgIFx1MDAzY3BhdGggc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS1saW5lam9pbj1cInJvdW5kXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIGQ9XCJNMTIgOHY0bDMgM202LTNhOSA5IDAgMTEtMTggMCA5IDkgMCAwMTE4IDB6XCIgL1x1MDAzZVxyXG4gICAgICAgICAgICAgICAgICBcdTAwM2Mvc3ZnXHUwMDNlXHJcbiAgICAgICAgICAgICAgICApfVxyXG4gICAgICAgICAgICAgICAge2JhZGdlLmljb24gPT09ICduZXR3b3JrJyBcdTAwMjZcdTAwMjYgKFxyXG4gICAgICAgICAgICAgICAgICBcdTAwM2NzdmcgY2xhc3M9XCJ3LTYgaC02XCIgZmlsbD1cIm5vbmVcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCJcdTAwM2VcclxuICAgICAgICAgICAgICAgICAgICBcdTAwM2NwYXRoIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2UtbGluZWpvaW49XCJyb3VuZFwiIHN0cm9rZS13aWR0aD1cIjJcIiBkPVwiTTE5IDExSDVtMTQgMGEyIDIgMCAwMTIgMnY2YTIgMiAwIDAxLTIgMkg1YTIgMiAwIDAxLTItMnYtNmEyIDIgMCAwMTItMm0xNCAwVjlhMiAyIDAgMDAtMi0yTTUgMTFWOWEyIDIgMCAwMTItMm0wIDBWNWEyIDIgMCAwMTItMmg2YTIgMiAwIDAxMiAydjJNNyA3aDEwXCIgL1x1MDAzZVxyXG4gICAgICAgICAgICAgICAgICBcdTAwM2Mvc3ZnXHUwMDNlXHJcbiAgICAgICAgICAgICAgICApfVxyXG4gICAgICAgICAgICAgICAge2JhZGdlLmljb24gPT09ICdwcm90ZWN0aW9uJyBcdTAwMjZcdTAwMjYgKFxyXG4gICAgICAgICAgICAgICAgICBcdTAwM2NzdmcgY2xhc3M9XCJ3LTYgaC02XCIgZmlsbD1cIm5vbmVcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCJcdTAwM2VcclxuICAgICAgICAgICAgICAgICAgICBcdTAwM2NwYXRoIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2UtbGluZWpvaW49XCJyb3VuZFwiIHN0cm9rZS13aWR0aD1cIjJcIiBkPVwiTTEyIDE1djJtLTYgNGgxMmEyIDIgMCAwMDItMnYtNmEyIDIgMCAwMC0yLTJINmEyIDIgMCAwMC0yIDJ2NmEyIDIgMCAwMDIgMnptMTAtMTBWN2E0IDQgMCAwMC04IDB2NGg4elwiIC9cdTAwM2VcclxuICAgICAgICAgICAgICAgICAgXHUwMDNjL3N2Z1x1MDAzZVxyXG4gICAgICAgICAgICAgICAgKX1cclxuICAgICAgICAgICAgICBcdTAwM2MvZGl2XHUwMDNlXHJcbiAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgXHUwMDNjZGl2IGNsYXNzPVwiYmFkZ2UtY29udGVudFwiXHUwMDNlXHJcbiAgICAgICAgICAgICAgICBcdTAwM2NkaXYgY2xhc3M9XCJiYWRnZS10aXRsZSB0ZXh0LXNtIGZvbnQtYm9sZCB0ZXh0LVsjMUMyQzNCXSBsZWFkaW5nLXRpZ2h0XCJcdTAwM2VcclxuICAgICAgICAgICAgICAgICAge2JhZGdlLnRpdGxlfVxyXG4gICAgICAgICAgICAgICAgXHUwMDNjL2Rpdlx1MDAzZVxyXG4gICAgICAgICAgICAgICAgXHUwMDNjZGl2IGNsYXNzPVwiYmFkZ2Utc3VidGl0bGUgdGV4dC1ncmF5LTYwMCB0ZXh0LXhzIGxlYWRpbmctdGlnaHRcIlx1MDAzZVxyXG4gICAgICAgICAgICAgICAgICB7YmFkZ2Uuc3VidGl0bGV9XHJcbiAgICAgICAgICAgICAgICBcdTAwM2MvZGl2XHUwMDNlXHJcbiAgICAgICAgICAgICAgXHUwMDNjL2Rpdlx1MDAzZVxyXG4gICAgICAgICAgICBcdTAwM2MvZGl2XHUwMDNlXHJcbiAgICAgICAgICApKX1cclxuICAgICAgICBcdTAwM2MvZGl2XHUwMDNlXHJcblxyXG4gICAgICAgIFx1MDAzYyEtLSBRdWljayBOYXZpZ2F0aW9uIFBpbGxzIC0tXHUwMDNlXHJcbiAgICAgICAgXHUwMDNjZGl2IGNsYXNzPVwibXQtMTBcIlx1MDAzZVxyXG4gICAgICAgICAgXHUwMDNjZGl2IGNsYXNzPVwicXVpY2stbmF2IGZsZXgganVzdGlmeS1jZW50ZXIgZ2FwLTMgZmxleC13cmFwXCJcdTAwM2VcclxuICAgICAgICAgICAge25hdmlnYXRpb25JdGVtcy5tYXAoKGl0ZW0pID1cdTAwM2UgKFxyXG4gICAgICAgICAgICAgIFx1MDAzY2EgaHJlZj17aXRlbS5ocmVmfSBjbGFzcz1cInF1aWNrLW5hdi1waWxsIGJnLXdoaXRlIGJvcmRlciBib3JkZXItZ3JheS0zMDAgcm91bmRlZC1mdWxsIHB4LTUgcHktMiB0ZXh0LXNtIHRleHQtZ3JheS03MDAgaG92ZXI6Ymctb3JhbmdlLTUwMCBob3Zlcjp0ZXh0LXdoaXRlIGhvdmVyOmJvcmRlci1vcmFuZ2UtNTAwIHRyYW5zaXRpb24tYWxsXCJcdTAwM2VcclxuICAgICAgICAgICAgICAgIHtpdGVtLnRleHR9XHJcbiAgICAgICAgICAgICAgXHUwMDNjL2FcdTAwM2VcclxuICAgICAgICAgICAgKSl9XHJcbiAgICAgICAgICBcdTAwM2MvZGl2XHUwMDNlXHJcbiAgICAgICAgXHUwMDNjL2Rpdlx1MDAzZVxyXG4gICAgICBcdTAwM2MvZGl2XHUwMDNlXHJcbiAgICBcdTAwM2Mvc2VjdGlvblx1MDAzZVxyXG5cclxuICAgIFx1MDAzYyEtLSBFbnRpdHkgQ29uc2lzdGVuY3kgTm90aWNlIC0tXHUwMDNlXHJcbiAgICBcdTAwM2NzZWN0aW9uIGNsYXNzPVwicHktOCBiZy1zbGF0ZS01MFwiXHUwMDNlXHJcbiAgICAgIFx1MDAzY2RpdiBjbGFzcz1cIm14LWF1dG8gbWF4LXctNnhsIHB4LTQgc206cHgtNiBsZzpweC04XCJcdTAwM2VcclxuICAgICAgICBcdTAwM2NkaXYgY2xhc3M9XCJteC1hdXRvIG1heC13LTR4bFwiXHUwMDNlXHJcbiAgICAgICAgICBcdTAwM2NkaXYgY2xhc3M9XCJiZy1ncmF5LTUwIGJvcmRlci1sLTQgYm9yZGVyLW9yYW5nZS01MDAgcC00IHJvdW5kZWQtbWRcIlx1MDAzZVxyXG4gICAgICAgICAgICBcdTAwM2NwIGNsYXNzPVwidGV4dC1zbSBmb250LW1lZGl1bSB0ZXh0LWdyYXktNzAwXCJcdTAwM2VcclxuICAgICAgICAgICAgICBcdTAwM2NzdHJvbmdcdTAwM2VJTVBPUlRBTlQgTk9USUNFOlx1MDAzYy9zdHJvbmdcdTAwM2UgRWRnZXZpZXcgRmluYW5jZSBpcyBhIHRyYWRpbmcgbmFtZSBvZiBcdTAwM2NzdHJvbmdcdTAwM2VFZGdldmlldyBNb3J0Z2FnZXMgUHR5IEx0ZFx1MDAzYy9zdHJvbmdcdTAwM2UgKEFDTiAxNjcgMjMzIDcxMikgQXVzdHJhbGlhbiBDcmVkaXQgTGljZW5jZSA0NTkyODcuIFRoaXMgQ3JlZGl0IEd1aWRlIG1lZXRzIGFsbCByZXF1aXJlbWVudHMgdW5kZXIgdGhlIE5hdGlvbmFsIENvbnN1bWVyIENyZWRpdCBQcm90ZWN0aW9uIEFjdCAyMDA5IGFuZCBwcm92aWRlcyB5b3Ugd2l0aCBpbXBvcnRhbnQgaW5mb3JtYXRpb24gYWJvdXQgb3VyIHNlcnZpY2VzLCByZWxhdGlvbnNoaXBzLCBhbmQgb2JsaWdhdGlvbnMuXHJcbiAgICAgICAgICAgIFx1MDAzYy9wXHUwMDNlXHJcbiAgICAgICAgICBcdTAwM2MvZGl2XHUwMDNlXHJcbiAgICAgICAgXHUwMDNjL2Rpdlx1MDAzZVxyXG4gICAgICBcdTAwM2MvZGl2XHUwMDNlXHJcbiAgICBcdTAwM2Mvc2VjdGlvblx1MDAzZVxyXG5cclxuICAgIFx1MDAzYyEtLSBTdW1tYXJ5IEJveCAtLVx1MDAzZVxyXG4gICAgXHUwMDNjc2VjdGlvbiBjbGFzcz1cInB5LTEyXCJcdTAwM2VcclxuICAgICAgXHUwMDNjZGl2IGNsYXNzPVwibXgtYXV0byBtYXgtdy02eGwgcHgtNCBzbTpweC02IGxnOnB4LThcIlx1MDAzZVxyXG4gICAgICAgIFx1MDAzY2RpdiBjbGFzcz1cIm14LWF1dG8gbWF4LXctNHhsXCJcdTAwM2VcclxuICAgICAgICAgIFx1MDAzY1NlY3VyaXR5U3VtbWFyeUJveFxyXG4gICAgICAgICAgICB0aXRsZT17c3VtbWFyeUNvbnRlbnQudGl0bGV9XHJcbiAgICAgICAgICAgIGl0ZW1zPXtzdW1tYXJ5Q29udGVudC5pdGVtc31cclxuICAgICAgICAgIC9cdTAwM2VcclxuICAgICAgICBcdTAwM2MvZGl2XHUwMDNlXHJcbiAgICAgIFx1MDAzYy9kaXZcdTAwM2VcclxuICAgIFx1MDAzYy9zZWN0aW9uXHUwMDNlXHJcblxyXG4gICAgXHUwMDNjIS0tIEFib3V0IFlvdXIgQnJva2VyIC0tXHUwMDNlXHJcbiAgICBcdTAwM2NzZWN0aW9uIGlkPVwiYWJvdXQtYnJva2VyXCIgY2xhc3M9XCJweS0xMiBtZDpweS0xNlwiXHUwMDNlXHJcbiAgICAgIFx1MDAzY2RpdiBjbGFzcz1cIm14LWF1dG8gbWF4LXctNnhsIHB4LTQgc206cHgtNiBsZzpweC04XCJcdTAwM2VcclxuICAgICAgICBcdTAwM2NkaXYgY2xhc3M9XCJteC1hdXRvIG1heC13LTR4bFwiXHUwMDNlXHJcbiAgICAgICAgICBcdTAwM2NoMiBjbGFzcz1cInRleHQtNHhsIGZvbnQtYm9sZCB0cmFja2luZy10aWdodCB0ZXh0LXNsYXRlLTkwMCBtYi04XCJcdTAwM2VcclxuICAgICAgICAgICAgQWJvdXQgWW91ciBCcm9rZXJcclxuICAgICAgICAgIFx1MDAzYy9oMlx1MDAzZVxyXG5cclxuICAgICAgICAgIFx1MDAzYyEtLSBQZXJzb25hbCBJbnRyb2R1Y3Rpb24gLS1cdTAwM2VcclxuICAgICAgICAgIFx1MDAzY2RpdiBjbGFzcz1cInByb3NlIG1heC13LW5vbmUgdGV4dC1zbGF0ZS02MDAgbWItOFwiXHUwMDNlXHJcbiAgICAgICAgICAgIFx1MDAzY3AgY2xhc3M9XCJ0ZXh0LXNtIGxlYWRpbmctcmVsYXhlZFwiXHUwMDNlXHJcbiAgICAgICAgICAgICAgTWVldCBcdTAwM2NzdHJvbmdcdTAwM2VEYW5pZWwgUGV0ZXJzXHUwMDNjL3N0cm9uZ1x1MDAzZSAoS25vd24gYXM6IERhbiksIHlvdXIgQXVzdHJhbGlhbiBDcmVkaXQgUmVwcmVzZW50YXRpdmUgYW5kIHRoZSBwcmluY2lwYWwgb2YgRWRnZXZpZXcgRmluYW5jZS4gV2l0aCBvdmVyIDIwIHllYXJzIGluIGJhbmtpbmcgYW5kIGZpbmFuY2UsIERhbiBicmluZ3MgZGVlcCBpbmR1c3RyeSBleHBlcnRpc2UgYW5kIGEgZ2VudWluZSBjb21taXRtZW50IHRvIHB1dHRpbmcgeW91ciBpbnRlcmVzdHMgZmlyc3QuXHJcbiAgICAgICAgICAgIFx1MDAzYy9wXHUwMDNlXHJcbiAgICAgICAgICBcdTAwM2MvZGl2XHUwMDNlXHJcblxyXG4gICAgICAgICAgXHUwMDNjIS0tIENvbnRhY3QgSW5mb3JtYXRpb24gQm94IC0tXHUwMDNlXHJcbiAgICAgICAgICBcdTAwM2NkaXYgY2xhc3M9XCJiZy13aGl0ZSBib3JkZXIgYm9yZGVyLWdyYXktMjAwIHJvdW5kZWQteGwgcC02IHNoYWRvdy1zbSBtYi04XCJcdTAwM2VcclxuICAgICAgICAgICAgXHUwMDNjaDMgY2xhc3M9XCJ0ZXh0LXhsIGZvbnQtc2VtaWJvbGQgdGV4dC1zbGF0ZS05MDAgbWItNFwiXHUwMDNlRGFuaWVsIFBldGVyc1x1MDAzYy9oM1x1MDAzZVxyXG4gICAgICAgICAgICBcdTAwM2NwIGNsYXNzPVwidGV4dC1zbSB0ZXh0LXNsYXRlLTYwMCBtYi00XCJcdTAwM2VBdXN0cmFsaWFuIENyZWRpdCBSZXByZXNlbnRhdGl2ZVx1MDAzYy9wXHUwMDNlXHJcbiAgICAgICAgICAgIFx1MDAzY2RpdiBjbGFzcz1cInNwYWNlLXktM1wiXHUwMDNlXHJcbiAgICAgICAgICAgICAgXHUwMDNjZGl2IGNsYXNzPVwiZmxleCBpdGVtcy1jZW50ZXJcIlx1MDAzZVxyXG4gICAgICAgICAgICAgICAgXHUwMDNjc3ZnIGNsYXNzPVwiaC01IHctNSB0ZXh0LXNsYXRlLTQwMCBtci0zXCIgZmlsbD1cIm5vbmVcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCJcdTAwM2VcclxuICAgICAgICAgICAgICAgICAgXHUwMDNjcGF0aCBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLWxpbmVqb2luPVwicm91bmRcIiBzdHJva2Utd2lkdGg9XCIyXCIgZD1cIk0zIDhsNy44OSA0LjI2YTIgMiAwIDAwMi4yMiAwTDIxIDhNNSAxOWgxNGEyIDIgMCAwMDItMlY3YTIgMiAwIDAwLTItMkg1YTIgMiAwIDAwLTIgMnYxMGEyIDIgMCAwMDIgMnpcIiAvXHUwMDNlXHJcbiAgICAgICAgICAgICAgICBcdTAwM2Mvc3ZnXHUwMDNlXHJcbiAgICAgICAgICAgICAgICBcdTAwM2NzcGFuIGNsYXNzPVwidGV4dC1zbSBmb250LW1lZGl1bVwiXHUwMDNlZGFuLnBldGVyc0BlZGdldmlld2ZpbmFuY2UuY29tLmF1XHUwMDNjL3NwYW5cdTAwM2VcclxuICAgICAgICAgICAgICBcdTAwM2MvZGl2XHUwMDNlXHJcbiAgICAgICAgICAgICAgXHUwMDNjZGl2IGNsYXNzPVwiZmxleCBpdGVtcy1jZW50ZXJcIlx1MDAzZVxyXG4gICAgICAgICAgICAgICAgXHUwMDNjc3ZnIGNsYXNzPVwiaC01IHctNSB0ZXh0LXNsYXRlLTQwMCBtci0zXCIgZmlsbD1cIm5vbmVcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCJcdTAwM2VcclxuICAgICAgICAgICAgICAgICAgXHUwMDNjcGF0aCBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLWxpbmVqb2luPVwicm91bmRcIiBzdHJva2Utd2lkdGg9XCIyXCIgZD1cIk0zIDVhMiAyIDAgMDEyLTJoMy4yOGExIDEgMCAwMS45NDguNjg0bDEuNDk4IDQuNDkzYTEgMSAwIDAxLS41MDIgMS4yMWwtMi4yNTcgMS4xM2ExMS4wNDIgMTEuMDQyIDAgMDA1LjUxNiA1LjUxNmwxLjEzLTIuMjU3YTEgMSAwIDAxMS4yMS0uNTAybDQuNDkzIDEuNDk4YTEgMSAwIDAxLjY4NC45NDlWMTlhMiAyIDAgMDEtMiAyaC0xQzkuNzE2IDIxIDMgMTQuMjg0IDMgNlY1elwiIC9cdTAwM2VcclxuICAgICAgICAgICAgICAgIFx1MDAzYy9zdmdcdTAwM2VcclxuICAgICAgICAgICAgICAgIFx1MDAzY3NwYW4gY2xhc3M9XCJ0ZXh0LXNtIGZvbnQtbWVkaXVtXCJcdTAwM2UxMzAwIDI4MCA4OTVcdTAwM2Mvc3Bhblx1MDAzZVxyXG4gICAgICAgICAgICAgIFx1MDAzYy9kaXZcdTAwM2VcclxuICAgICAgICAgICAgICBcdTAwM2NkaXYgY2xhc3M9XCJmbGV4IGl0ZW1zLWNlbnRlclwiXHUwMDNlXHJcbiAgICAgICAgICAgICAgICBcdTAwM2NzdmcgY2xhc3M9XCJoLTUgdy01IHRleHQtc2xhdGUtNDAwIG1yLTNcIiBmaWxsPVwibm9uZVwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIlx1MDAzZVxyXG4gICAgICAgICAgICAgICAgICBcdTAwM2NwYXRoIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2UtbGluZWpvaW49XCJyb3VuZFwiIHN0cm9rZS13aWR0aD1cIjJcIiBkPVwiTTIxIDEzLjI1NUEyMy45MzEgMjMuOTMxIDAgMDExMiAxNWMtMy4xODMgMC02LjIyLS42Mi05LTEuNzQ1TTE2IDZWNGEyIDIgMCAwMC0yLTJoLTRhMiAyIDAgMDAtMi0ydjJtOCAwVjZhMiAyIDAgMDEyIDJ2NmEyIDIgMCAwMS0yIDJIOGEyIDIgMCAwMS0yLTJWOGEyIDIgMCAwMTItMlY2XCIgL1x1MDAzZVxyXG4gICAgICAgICAgICAgICAgXHUwMDNjL3N2Z1x1MDAzZVxyXG4gICAgICAgICAgICAgICAgXHUwMDNjc3BhbiBjbGFzcz1cInRleHQtc20gZm9udC1tZWRpdW1cIlx1MDAzZTIwKyBZZWFycyBGaW5hbmNlIEluZHVzdHJ5IEV4cGVyaWVuY2VcdTAwM2Mvc3Bhblx1MDAzZVxyXG4gICAgICAgICAgICAgIFx1MDAzYy9kaXZcdTAwM2VcclxuICAgICAgICAgICAgXHUwMDNjL2Rpdlx1MDAzZVxyXG4gICAgICAgICAgXHUwMDNjL2Rpdlx1MDAzZVxyXG5cclxuICAgICAgICAgIFx1MDAzYyEtLSBPdXIgQ29tbWl0bWVudCBTZWN0aW9uIC0tXHUwMDNlXHJcbiAgICAgICAgICBcdTAwM2NkaXYgY2xhc3M9XCJiZy1ncmF5LTUwIGJvcmRlciBib3JkZXItZ3JheS0yMDAgcm91bmRlZC14bCBwLTggbWItOFwiXHUwMDNlXHJcbiAgICAgICAgICAgIFx1MDAzY2RpdiBjbGFzcz1cImZsZXggaXRlbXMtY2VudGVyIGdhcC0zIHRleHQtMnhsIGZvbnQtYm9sZCB0ZXh0LVsjMUMyQzNCXSBtYi02XCJcdTAwM2VcclxuICAgICAgICAgICAgICBcdTAwM2NzdmcgY2xhc3M9XCJ3LTggaC04IHRleHQtb3JhbmdlLTUwMFwiIGZpbGw9XCJub25lXCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgdmlld0JveD1cIjAgMCAyNCAyNFwiXHUwMDNlXHJcbiAgICAgICAgICAgICAgICBcdTAwM2NwYXRoIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2UtbGluZWpvaW49XCJyb3VuZFwiIHN0cm9rZS13aWR0aD1cIjJcIiBkPVwiTTkgNUg3YTIgMiAwIDAwLTIgMnYxMmEyIDIgMCAwMDIgMmgxMGEyIDIgMCAwMDItMlY3YTIgMiAwIDAwLTItMmgtMk05IDVhMiAyIDAgMDAyIDJoMmEyIDIgMCAwMDItMk05IDVhMiAyIDAgMDEyLTJoMmEyIDIgMCAwMTIgMm0tNiA5bDIgMiA0LTRcIlx1MDAzZVx1MDAzYy9wYXRoXHUwMDNlXHJcbiAgICAgICAgICAgICAgXHUwMDNjL3N2Z1x1MDAzZVxyXG4gICAgICAgICAgICAgIE9VUiBDT01NSVRNRU5UIFRPIFlPVVxyXG4gICAgICAgICAgICBcdTAwM2MvZGl2XHUwMDNlXHJcbiAgICAgICAgICAgIFx1MDAzY2RpdiBjbGFzcz1cInRleHQtZ3JheS03MDBcIlx1MDAzZVxyXG4gICAgICAgICAgICAgIFx1MDAzY3AgY2xhc3M9XCJ0ZXh0LXNtIG1iLTRcIlx1MDAzZVdoZW4geW91IHdvcmsgd2l0aCBFZGdldmlldyBGaW5hbmNlLCB5b3UgY2FuIGNvdW50IG9uIHVzIHRvOlx1MDAzYy9wXHUwMDNlXHJcbiAgICAgICAgICAgICAgXHUwMDNjdWwgY2xhc3M9XCJzcGFjZS15LTNcIlx1MDAzZVxyXG4gICAgICAgICAgICAgICAgXHUwMDNjbGkgY2xhc3M9XCJmbGV4IGl0ZW1zLXN0YXJ0IGdhcC0zXCJcdTAwM2VcclxuICAgICAgICAgICAgICAgICAgXHUwMDNjc3ZnIGNsYXNzPVwidy02IGgtNiB0ZXh0LWdyZWVuLTUwMCBmbGV4LXNocmluay0wIG10LTAuNVwiIGZpbGw9XCJub25lXCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgdmlld0JveD1cIjAgMCAyNCAyNFwiXHUwMDNlXHJcbiAgICAgICAgICAgICAgICAgICAgXHUwMDNjcGF0aCBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLWxpbmVqb2luPVwicm91bmRcIiBzdHJva2Utd2lkdGg9XCIyXCIgZD1cIk01IDEzbDQgNEwxOSA3XCJcdTAwM2VcdTAwM2MvcGF0aFx1MDAzZVxyXG4gICAgICAgICAgICAgICAgICBcdTAwM2Mvc3ZnXHUwMDNlXHJcbiAgICAgICAgICAgICAgICAgIFx1MDAzY2RpdiBjbGFzcz1cInRleHQtc20gdGV4dC1ncmF5LTcwMCBsZWFkaW5nLXJlbGF4ZWRcIlx1MDAzZVxyXG4gICAgICAgICAgICAgICAgICAgIFx1MDAzY3N0cm9uZyBjbGFzcz1cInRleHQtWyMxQzJDM0JdXCJcdTAwM2VBY3QgaW4geW91ciBiZXN0IGludGVyZXN0cyBhdCBhbGwgdGltZXNcdTAwM2Mvc3Ryb25nXHUwMDNlIC0gaXQncyBub3QganVzdCBvdXIgbGVnYWwgb2JsaWdhdGlvbiwgaXQncyBob3cgd2UndmUgYnVpbHQgb3VyIHJlcHV0YXRpb25cclxuICAgICAgICAgICAgICAgICAgXHUwMDNjL2Rpdlx1MDAzZVxyXG4gICAgICAgICAgICAgICAgXHUwMDNjL2xpXHUwMDNlXHJcbiAgICAgICAgICAgICAgICBcdTAwM2NsaSBjbGFzcz1cImZsZXggaXRlbXMtc3RhcnQgZ2FwLTNcIlx1MDAzZVxyXG4gICAgICAgICAgICAgICAgICBcdTAwM2NzdmcgY2xhc3M9XCJ3LTYgaC02IHRleHQtZ3JlZW4tNTAwIGZsZXgtc2hyaW5rLTAgbXQtMC41XCIgZmlsbD1cIm5vbmVcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCJcdTAwM2VcclxuICAgICAgICAgICAgICAgICAgICBcdTAwM2NwYXRoIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2UtbGluZWpvaW49XCJyb3VuZFwiIHN0cm9rZS13aWR0aD1cIjJcIiBkPVwiTTUgMTNsNCA0TDE5IDdcIlx1MDAzZVx1MDAzYy9wYXRoXHUwMDNlXHJcbiAgICAgICAgICAgICAgICAgIFx1MDAzYy9zdmdcdTAwM2VcclxuICAgICAgICAgICAgICAgICAgXHUwMDNjZGl2IGNsYXNzPVwidGV4dC1zbSB0ZXh0LWdyYXktNzAwIGxlYWRpbmctcmVsYXhlZFwiXHUwMDNlXHJcbiAgICAgICAgICAgICAgICAgICAgXHUwMDNjc3Ryb25nIGNsYXNzPVwidGV4dC1bIzFDMkMzQl1cIlx1MDAzZVByb3ZpZGUgY2xlYXIsIGhvbmVzdCBhZHZpY2UgYWJvdXQgeW91ciBvcHRpb25zXHUwMDNjL3N0cm9uZ1x1MDAzZSAtIG5vIGphcmdvbiwgbm8gY29uZnVzaW9uLCBqdXN0IHN0cmFpZ2h0IHRhbGsgYWJvdXQgd2hhdCB3b3JrcyBmb3IgeW91ciBzaXR1YXRpb25cclxuICAgICAgICAgICAgICAgICAgXHUwMDNjL2Rpdlx1MDAzZVxyXG4gICAgICAgICAgICAgICAgXHUwMDNjL2xpXHUwMDNlXHJcbiAgICAgICAgICAgICAgICBcdTAwM2NsaSBjbGFzcz1cImZsZXggaXRlbXMtc3RhcnQgZ2FwLTNcIlx1MDAzZVxyXG4gICAgICAgICAgICAgICAgICBcdTAwM2NzdmcgY2xhc3M9XCJ3LTYgaC02IHRleHQtZ3JlZW4tNTAwIGZsZXgtc2hyaW5rLTAgbXQtMC41XCIgZmlsbD1cIm5vbmVcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCJcdTAwM2VcclxuICAgICAgICAgICAgICAgICAgICBcdTAwM2NwYXRoIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2UtbGluZWpvaW49XCJyb3VuZFwiIHN0cm9rZS13aWR0aD1cIjJcIiBkPVwiTTUgMTNsNCA0TDE5IDdcIlx1MDAzZVx1MDAzYy9wYXRoXHUwMDNlXHJcbiAgICAgICAgICAgICAgICAgIFx1MDAzYy9zdmdcdTAwM2VcclxuICAgICAgICAgICAgICAgICAgXHUwMDNjZGl2IGNsYXNzPVwidGV4dC1zbSB0ZXh0LWdyYXktNzAwIGxlYWRpbmctcmVsYXhlZFwiXHUwMDNlXHJcbiAgICAgICAgICAgICAgICAgICAgXHUwMDNjc3Ryb25nIGNsYXNzPVwidGV4dC1bIzFDMkMzQl1cIlx1MDAzZU1haW50YWluIHByb2Zlc3Npb25hbCBzdGFuZGFyZHMgYW5kIGNvbXBldGVuY3lcdTAwM2Mvc3Ryb25nXHUwMDNlIC0gdGhyb3VnaCBvbmdvaW5nIHRyYWluaW5nIGFuZCBpbmR1c3RyeSBpbnZvbHZlbWVudFxyXG4gICAgICAgICAgICAgICAgICBcdTAwM2MvZGl2XHUwMDNlXHJcbiAgICAgICAgICAgICAgICBcdTAwM2MvbGlcdTAwM2VcclxuICAgICAgICAgICAgICAgIFx1MDAzY2xpIGNsYXNzPVwiZmxleCBpdGVtcy1zdGFydCBnYXAtM1wiXHUwMDNlXHJcbiAgICAgICAgICAgICAgICAgIFx1MDAzY3N2ZyBjbGFzcz1cInctNiBoLTYgdGV4dC1ncmVlbi01MDAgZmxleC1zaHJpbmstMCBtdC0wLjVcIiBmaWxsPVwibm9uZVwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIlx1MDAzZVxyXG4gICAgICAgICAgICAgICAgICAgIFx1MDAzY3BhdGggc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS1saW5lam9pbj1cInJvdW5kXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIGQ9XCJNNSAxM2w0IDRMMTkgN1wiXHUwMDNlXHUwMDNjL3BhdGhcdTAwM2VcclxuICAgICAgICAgICAgICAgICAgXHUwMDNjL3N2Z1x1MDAzZVxyXG4gICAgICAgICAgICAgICAgICBcdTAwM2NkaXYgY2xhc3M9XCJ0ZXh0LXNtIHRleHQtZ3JheS03MDAgbGVhZGluZy1yZWxheGVkXCJcdTAwM2VcclxuICAgICAgICAgICAgICAgICAgICBcdTAwM2NzdHJvbmcgY2xhc3M9XCJ0ZXh0LVsjMUMyQzNCXVwiXHUwMDNlUmVzcGVjdCB5b3VyIHByaXZhY3kgYW5kIGhhbmRsZSBpbmZvcm1hdGlvbiBzZWN1cmVseVx1MDAzYy9zdHJvbmdcdTAwM2UgLSB5b3VyIGZpbmFuY2lhbCBpbmZvcm1hdGlvbiBkZXNlcnZlcyB0aGUgaGlnaGVzdCBwcm90ZWN0aW9uXHJcbiAgICAgICAgICAgICAgICAgIFx1MDAzYy9kaXZcdTAwM2VcclxuICAgICAgICAgICAgICAgIFx1MDAzYy9saVx1MDAzZVxyXG4gICAgICAgICAgICAgICAgXHUwMDNjbGkgY2xhc3M9XCJmbGV4IGl0ZW1zLXN0YXJ0IGdhcC0zXCJcdTAwM2VcclxuICAgICAgICAgICAgICAgICAgXHUwMDNjc3ZnIGNsYXNzPVwidy02IGgtNiB0ZXh0LWdyZWVuLTUwMCBmbGV4LXNocmluay0wIG10LTAuNVwiIGZpbGw9XCJub25lXCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgdmlld0JveD1cIjAgMCAyNCAyNFwiXHUwMDNlXHJcbiAgICAgICAgICAgICAgICAgICAgXHUwMDNjcGF0aCBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLWxpbmVqb2luPVwicm91bmRcIiBzdHJva2Utd2lkdGg9XCIyXCIgZD1cIk01IDEzbDQgNEwxOSA3XCJcdTAwM2VcdTAwM2MvcGF0aFx1MDAzZVxyXG4gICAgICAgICAgICAgICAgICBcdTAwM2Mvc3ZnXHUwMDNlXHJcbiAgICAgICAgICAgICAgICAgIFx1MDAzY2RpdiBjbGFzcz1cInRleHQtc20gdGV4dC1ncmF5LTcwMCBsZWFkaW5nLXJlbGF4ZWRcIlx1MDAzZVxyXG4gICAgICAgICAgICAgICAgICAgIFx1MDAzY3N0cm9uZyBjbGFzcz1cInRleHQtWyMxQzJDM0JdXCJcdTAwM2VTdXBwb3J0IHlvdSB0aHJvdWdob3V0IHRoZSBlbnRpcmUgcHJvY2Vzc1x1MDAzYy9zdHJvbmdcdTAwM2UgLSBmcm9tIGluaXRpYWwgY29uc3VsdGF0aW9uIHRocm91Z2ggc2V0dGxlbWVudCBhbmQgYmV5b25kXHJcbiAgICAgICAgICAgICAgICAgIFx1MDAzYy9kaXZcdTAwM2VcclxuICAgICAgICAgICAgICAgIFx1MDAzYy9saVx1MDAzZVxyXG4gICAgICAgICAgICAgIFx1MDAzYy91bFx1MDAzZVxyXG4gICAgICAgICAgICBcdTAwM2MvZGl2XHUwMDNlXHJcbiAgICAgICAgICBcdTAwM2MvZGl2XHUwMDNlXHJcblxyXG4gICAgICAgICAgXHUwMDNjZGl2IGNsYXNzPVwicHJvc2UgbWF4LXctbm9uZSB0ZXh0LXNsYXRlLTYwMFwiXHUwMDNlXHJcbiAgICAgICAgICAgIFx1MDAzY3AgY2xhc3M9XCJtYi00IHRleHQtc20gbGVhZGluZy1yZWxheGVkXCJcdTAwM2VcclxuICAgICAgICAgICAgICBEYW4ncyBiYWNrZ3JvdW5kIGluY2x1ZGVzIHNlbmlvciByb2xlcyBhdCBtYWpvciBBdXN0cmFsaWFuIGJhbmtzIGFuZCBvdmVyIDExIHllYXJzIGFzIGEgc3BlY2lhbGlzdCBjb21tZXJjaWFsIGZpbmFuY2UgYnJva2VyLiBUaGlzIGNvbWJpbmF0aW9uIG9mIGNvcnBvcmF0ZSBiYW5raW5nIGV4cGVyaWVuY2UgYW5kIGluZGVwZW5kZW50IGJyb2tpbmcgZ2l2ZXMgeW91IHRoZSBiZW5lZml0IG9mIGluc2lkZXIga25vd2xlZGdlIHdpdGggcGVyc29uYWxpc2VkIHNlcnZpY2UuXHJcbiAgICAgICAgICAgIFx1MDAzYy9wXHUwMDNlXHJcbiAgICAgICAgICAgIFx1MDAzY3AgY2xhc3M9XCJmb250LW1lZGl1bSB0ZXh0LXNsYXRlLTgwMCB0ZXh0LXNtXCJcdTAwM2VcclxuICAgICAgICAgICAgICBcdTAwM2NzdHJvbmdcdTAwM2VXaGF0IHRoaXMgbWVhbnMgZm9yIHlvdTpcdTAwM2Mvc3Ryb25nXHUwMDNlIFlvdSdyZSB3b3JraW5nIHdpdGggc29tZW9uZSB3aG8gdW5kZXJzdGFuZHMgYm90aCBzaWRlcyBvZiB0aGUgbGVuZGluZyBlcXVhdGlvbiAtIHdoYXQgYmFua3MgbmVlZCB0byBzYXkgeWVzLCBhbmQgd2hhdCBidXNpbmVzcyBvd25lcnMgbmVlZCB0byBzdWNjZWVkLlxyXG4gICAgICAgICAgICBcdTAwM2MvcFx1MDAzZVxyXG4gICAgICAgICAgXHUwMDNjL2Rpdlx1MDAzZVxyXG4gICAgICAgIFx1MDAzYy9kaXZcdTAwM2VcclxuICAgICAgXHUwMDNjL2Rpdlx1MDAzZVxyXG4gICAgXHUwMDNjL3NlY3Rpb25cdTAwM2VcclxuXHJcbiAgICBcdTAwM2MhLS0gT3VyIExlbmRlciBSZWxhdGlvbnNoaXBzIC0tXHUwMDNlXHJcbiAgICBcdTAwM2NzZWN0aW9uIGlkPVwibGVuZGVyLXJlbGF0aW9uc2hpcHNcIiBjbGFzcz1cInB5LTEyIG1kOnB5LTE2IGJnLXNsYXRlLTUwXCJcdTAwM2VcclxuICAgICAgXHUwMDNjZGl2IGNsYXNzPVwibXgtYXV0byBtYXgtdy02eGwgcHgtNCBzbTpweC02IGxnOnB4LThcIlx1MDAzZVxyXG4gICAgICAgIFx1MDAzY2RpdiBjbGFzcz1cIm14LWF1dG8gbWF4LXctNHhsXCJcdTAwM2VcclxuICAgICAgICAgIFx1MDAzY2gyIGNsYXNzPVwidGV4dC00eGwgZm9udC1ib2xkIHRyYWNraW5nLXRpZ2h0IHRleHQtc2xhdGUtOTAwIG1iLThcIlx1MDAzZVxyXG4gICAgICAgICAgICBPdXIgTGVuZGVyIFJlbGF0aW9uc2hpcHNcclxuICAgICAgICAgIFx1MDAzYy9oMlx1MDAzZVxyXG5cclxuICAgICAgICAgIFx1MDAzY2RpdiBjbGFzcz1cInRleHQtY2VudGVyIG1iLTEwXCJcdTAwM2VcclxuICAgICAgICAgICAgXHUwMDNjcCBjbGFzcz1cInRleHQtc20gdGV4dC1zbGF0ZS02MDAgbWF4LXctM3hsIG14LWF1dG9cIlx1MDAzZVxyXG4gICAgICAgICAgICAgIFdlIG1haW50YWluIGFjdGl2ZSByZWxhdGlvbnNoaXBzIHdpdGggb3ZlciA0MCBzcGVjaWFsaXN0IGxlbmRlcnMsIGdpdmluZyB5b3UgYWNjZXNzIHRvIGNvbXBldGl0aXZlIHJhdGVzIGFuZCBwcm9kdWN0cyB5b3Ugd29uJ3QgZmluZCBnb2luZyBkaXJlY3QgdG8gYSBzaW5nbGUgYmFuay5cclxuICAgICAgICAgICAgXHUwMDNjL3BcdTAwM2VcclxuICAgICAgICAgIFx1MDAzYy9kaXZcdTAwM2VcclxuXHJcbiAgICAgICAgICBcdTAwM2MhLS0gTGVuZGVyIENhdGVnb3JpZXMgLS1cdTAwM2VcclxuICAgICAgICAgIFx1MDAzY2RpdiBjbGFzcz1cImdyaWQgZ3JpZC1jb2xzLTEgbWQ6Z3JpZC1jb2xzLTMgZ2FwLTYgbWItMTBcIlx1MDAzZVxyXG4gICAgICAgICAgICBcdTAwM2MhLS0gTWFqb3IgQmFua3MgLS1cdTAwM2VcclxuICAgICAgICAgICAgXHUwMDNjZGl2IGNsYXNzPVwiYmctd2hpdGUgYm9yZGVyIGJvcmRlci1ncmF5LTIwMCByb3VuZGVkLXhsIHAtNiBzaGFkb3ctc21cIlx1MDAzZVxyXG4gICAgICAgICAgICAgIFx1MDAzY2gzIGNsYXNzPVwidGV4dC14bCBmb250LXNlbWlib2xkIHRleHQtc2xhdGUtOTAwIG1iLTRcIlx1MDAzZU1ham9yIEJhbmtzXHUwMDNjL2gzXHUwMDNlXHJcbiAgICAgICAgICAgICAgXHUwMDNjdWwgY2xhc3M9XCJzcGFjZS15LTIgdGV4dC1zbSB0ZXh0LXNsYXRlLTYwMFwiXHUwMDNlXHJcbiAgICAgICAgICAgICAgICBcdTAwM2NsaVx1MDAzZeKAoiBDb21tb253ZWFsdGggQmFua1x1MDAzYy9saVx1MDAzZVxyXG4gICAgICAgICAgICAgICAgXHUwMDNjbGlcdTAwM2XigKIgV2VzdHBhY1x1MDAzYy9saVx1MDAzZVxyXG4gICAgICAgICAgICAgICAgXHUwMDNjbGlcdTAwM2XigKIgQU5aXHUwMDNjL2xpXHUwMDNlXHJcbiAgICAgICAgICAgICAgICBcdTAwM2NsaVx1MDAzZeKAoiBOQUJcdTAwM2MvbGlcdTAwM2VcclxuICAgICAgICAgICAgICAgIFx1MDAzY2xpXHUwMDNl4oCiIEp1ZG8gQmFua1x1MDAzYy9saVx1MDAzZVxyXG4gICAgICAgICAgICAgICAgXHUwMDNjbGkgY2xhc3M9XCJwdC0yIHRleHQteHMgdGV4dC1zbGF0ZS01MDBcIlx1MDAzZVxyXG4gICAgICAgICAgICAgICAgICArIG1hbnkgbW9yZVxyXG4gICAgICAgICAgICAgICAgXHUwMDNjL2xpXHUwMDNlXHJcbiAgICAgICAgICAgICAgXHUwMDNjL3VsXHUwMDNlXHJcbiAgICAgICAgICAgIFx1MDAzYy9kaXZcdTAwM2VcclxuXHJcbiAgICAgICAgICAgIFx1MDAzYyEtLSBOb24tQmFuayBMZW5kZXJzIC0tXHUwMDNlXHJcbiAgICAgICAgICAgIFx1MDAzY2RpdiBjbGFzcz1cImJnLXdoaXRlIGJvcmRlciBib3JkZXItZ3JheS0yMDAgcm91bmRlZC14bCBwLTYgc2hhZG93LXNtXCJcdTAwM2VcclxuICAgICAgICAgICAgICBcdTAwM2NoMyBjbGFzcz1cInRleHQteGwgZm9udC1zZW1pYm9sZCB0ZXh0LXNsYXRlLTkwMCBtYi00XCJcdTAwM2VOb24tQmFuayBMZW5kZXJzXHUwMDNjL2gzXHUwMDNlXHJcbiAgICAgICAgICAgICAgXHUwMDNjdWwgY2xhc3M9XCJzcGFjZS15LTIgdGV4dC1zbSB0ZXh0LXNsYXRlLTYwMFwiXHUwMDNlXHJcbiAgICAgICAgICAgICAgICBcdTAwM2NsaVx1MDAzZeKAoiBSZXNpbWFjXHUwMDNjL2xpXHUwMDNlXHJcbiAgICAgICAgICAgICAgICBcdTAwM2NsaVx1MDAzZeKAoiBMaWJlcnR5IEZpbmFuY2lhbFx1MDAzYy9saVx1MDAzZVxyXG4gICAgICAgICAgICAgICAgXHUwMDNjbGlcdTAwM2XigKIgTGEgVHJvYmUgRmluYW5jaWFsXHUwMDNjL2xpXHUwMDNlXHJcbiAgICAgICAgICAgICAgICBcdTAwM2NsaVx1MDAzZeKAoiBSZWRaZWRcdTAwM2MvbGlcdTAwM2VcclxuICAgICAgICAgICAgICAgIFx1MDAzY2xpXHUwMDNl4oCiIFBlcHBlciBNb25leVx1MDAzYy9saVx1MDAzZVxyXG4gICAgICAgICAgICAgICAgXHUwMDNjbGkgY2xhc3M9XCJwdC0yIHRleHQteHMgdGV4dC1zbGF0ZS01MDBcIlx1MDAzZVxyXG4gICAgICAgICAgICAgICAgICArIG1hbnkgbW9yZVxyXG4gICAgICAgICAgICAgICAgXHUwMDNjL2xpXHUwMDNlXHJcbiAgICAgICAgICAgICAgXHUwMDNjL3VsXHUwMDNlXHJcbiAgICAgICAgICAgIFx1MDAzYy9kaXZcdTAwM2VcclxuXHJcbiAgICAgICAgICAgIFx1MDAzYyEtLSBDb21tZXJjaWFsIFNwZWNpYWxpc3RzIC0tXHUwMDNlXHJcbiAgICAgICAgICAgIFx1MDAzY2RpdiBjbGFzcz1cImJnLXdoaXRlIGJvcmRlciBib3JkZXItZ3JheS0yMDAgcm91bmRlZC14bCBwLTYgc2hhZG93LXNtXCJcdTAwM2VcclxuICAgICAgICAgICAgICBcdTAwM2NoMyBjbGFzcz1cInRleHQteGwgZm9udC1zZW1pYm9sZCB0ZXh0LXNsYXRlLTkwMCBtYi00XCJcdTAwM2VDb21tZXJjaWFsIFNwZWNpYWxpc3RzXHUwMDNjL2gzXHUwMDNlXHJcbiAgICAgICAgICAgICAgXHUwMDNjdWwgY2xhc3M9XCJzcGFjZS15LTIgdGV4dC1zbSB0ZXh0LXNsYXRlLTYwMFwiXHUwMDNlXHJcbiAgICAgICAgICAgICAgICBcdTAwM2NsaVx1MDAzZeKAoiBQZXBwZXIgQ29tbWVyY2lhbFx1MDAzYy9saVx1MDAzZVxyXG4gICAgICAgICAgICAgICAgXHUwMDNjbGlcdTAwM2XigKIgRWFzeXBheVx1MDAzYy9saVx1MDAzZVxyXG4gICAgICAgICAgICAgICAgXHUwMDNjbGlcdTAwM2XigKIgTW9uZXl0ZWNoXHUwMDNjL2xpXHUwMDNlXHJcbiAgICAgICAgICAgICAgICBcdTAwM2NsaVx1MDAzZeKAoiBQcmltZSBDYXBpdGFsXHUwMDNjL2xpXHUwMDNlXHJcbiAgICAgICAgICAgICAgICBcdTAwM2NsaVx1MDAzZeKAoiBQcm9zcGEgQnVzaW5lc3MgTG9hbnNcdTAwM2MvbGlcdTAwM2VcclxuICAgICAgICAgICAgICAgIFx1MDAzY2xpIGNsYXNzPVwicHQtMiB0ZXh0LXhzIHRleHQtc2xhdGUtNTAwXCJcdTAwM2VcclxuICAgICAgICAgICAgICAgICAgKyBtYW55IG1vcmVcclxuICAgICAgICAgICAgICAgIFx1MDAzYy9saVx1MDAzZVxyXG4gICAgICAgICAgICAgIFx1MDAzYy91bFx1MDAzZVxyXG4gICAgICAgICAgICBcdTAwM2MvZGl2XHUwMDNlXHJcbiAgICAgICAgICBcdTAwM2MvZGl2XHUwMDNlXHJcblxyXG4gICAgICAgICAgXHUwMDNjIS0tIFdoYXQgVGhpcyBNZWFucyBGb3IgWW91IEJveCAtLVx1MDAzZVxyXG4gICAgICAgICAgXHUwMDNjZGl2IGNsYXNzPVwiYmctZ3JheS01MCBib3JkZXIgYm9yZGVyLWdyYXktMjAwIHJvdW5kZWQteGwgcC02XCJcdTAwM2VcclxuICAgICAgICAgICAgXHUwMDNjZGl2IGNsYXNzPVwiZmxleCBpdGVtcy1jZW50ZXIgZ2FwLTMgdGV4dC0yeGwgZm9udC1ib2xkIHRleHQtWyMxQzJDM0JdIG1iLTRcIlx1MDAzZVxyXG4gICAgICAgICAgICAgIFx1MDAzY3N2ZyBjbGFzcz1cInctNiBoLTYgdGV4dC1vcmFuZ2UtNTAwXCIgZmlsbD1cIm5vbmVcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCJcdTAwM2VcclxuICAgICAgICAgICAgICAgIFx1MDAzY3BhdGggc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS1saW5lam9pbj1cInJvdW5kXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIGQ9XCJNOSA1SDdhMiAyIDAgMDAtMiAydjEyYTIgMiAwIDAwMiAyaDEwYTIgMiAwIDAwMi0yVjdhMiAyIDAgMDAtMi0yaC0yTTkgNWEyIDIgMCAwMDIgMmgyYTIgMiAwIDAwMi0yTTkgNWEyIDIgMCAwMTItMmgyYTIgMiAwIDAxMiAybS02IDlsMiAyIDQtNFwiXHUwMDNlXHUwMDNjL3BhdGhcdTAwM2VcclxuICAgICAgICAgICAgICBcdTAwM2Mvc3ZnXHUwMDNlXHJcbiAgICAgICAgICAgICAgV0hBVCBUSElTIE1FQU5TIEZPUiBZT1VcclxuICAgICAgICAgICAgXHUwMDNjL2Rpdlx1MDAzZVxyXG4gICAgICAgICAgICBcdTAwM2NkaXYgY2xhc3M9XCJzcGFjZS15LTMgdGV4dC1ncmF5LTcwMFwiXHUwMDNlXHJcbiAgICAgICAgICAgICAgXHUwMDNjZGl2IGNsYXNzPVwiZmxleCBpdGVtcy1zdGFydCBnYXAtM1wiXHUwMDNlXHJcbiAgICAgICAgICAgICAgICBcdTAwM2NzdmcgY2xhc3M9XCJ3LTUgaC01IHRleHQtZ3JlZW4tNTAwIGZsZXgtc2hyaW5rLTAgbXQtMC41XCIgZmlsbD1cIm5vbmVcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCJcdTAwM2VcclxuICAgICAgICAgICAgICAgICAgXHUwMDNjcGF0aCBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLWxpbmVqb2luPVwicm91bmRcIiBzdHJva2Utd2lkdGg9XCIyXCIgZD1cIk01IDEzbDQgNEwxOSA3XCJcdTAwM2VcdTAwM2MvcGF0aFx1MDAzZVxyXG4gICAgICAgICAgICAgICAgXHUwMDNjL3N2Z1x1MDAzZVxyXG4gICAgICAgICAgICAgICAgXHUwMDNjZGl2IGNsYXNzPVwidGV4dC1zbSB0ZXh0LWdyYXktNzAwIGxlYWRpbmctcmVsYXhlZFwiXHUwMDNlXHJcbiAgICAgICAgICAgICAgICAgIFx1MDAzY3N0cm9uZyBjbGFzcz1cInRleHQtWyMxQzJDM0JdXCJcdTAwM2VBY2Nlc3MgdG8gY29tcGV0aXRpdmUgcmF0ZXMgYWNyb3NzIGFsbCBtYXJrZXRzXHUwMDNjL3N0cm9uZ1x1MDAzZSAtIHdlIGNvbXBhcmUgb3B0aW9ucyB5b3UgY2FuJ3QgYWNjZXNzIGRpcmVjdGx5XHJcbiAgICAgICAgICAgICAgICBcdTAwM2MvZGl2XHUwMDNlXHJcbiAgICAgICAgICAgICAgXHUwMDNjL2Rpdlx1MDAzZVxyXG4gICAgICAgICAgICAgIFx1MDAzY2RpdiBjbGFzcz1cImZsZXggaXRlbXMtc3RhcnQgZ2FwLTNcIlx1MDAzZVxyXG4gICAgICAgICAgICAgICAgXHUwMDNjc3ZnIGNsYXNzPVwidy01IGgtNSB0ZXh0LWdyZWVuLTUwMCBmbGV4LXNocmluay0wIG10LTAuNVwiIGZpbGw9XCJub25lXCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgdmlld0JveD1cIjAgMCAyNCAyNFwiXHUwMDNlXHJcbiAgICAgICAgICAgICAgICAgIFx1MDAzY3BhdGggc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS1saW5lam9pbj1cInJvdW5kXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIGQ9XCJNNSAxM2w0IDRMMTkgN1wiXHUwMDNlXHUwMDNjL3BhdGhcdTAwM2VcclxuICAgICAgICAgICAgICAgIFx1MDAzYy9zdmdcdTAwM2VcclxuICAgICAgICAgICAgICAgIFx1MDAzY2RpdiBjbGFzcz1cInRleHQtc20gdGV4dC1ncmF5LTcwMCBsZWFkaW5nLXJlbGF4ZWRcIlx1MDAzZVxyXG4gICAgICAgICAgICAgICAgICBcdTAwM2NzdHJvbmcgY2xhc3M9XCJ0ZXh0LVsjMUMyQzNCXVwiXHUwMDNlUHJvZHVjdHMgbm90IGF2YWlsYWJsZSBkaXJlY3QgdG8gY29uc3VtZXJzXHUwMDNjL3N0cm9uZ1x1MDAzZSAtIHNwZWNpYWxpc3QgYnVzaW5lc3MgbGVuZGVycyB3aXRoIHVuaXF1ZSBzb2x1dGlvbnNcclxuICAgICAgICAgICAgICAgIFx1MDAzYy9kaXZcdTAwM2VcclxuICAgICAgICAgICAgICBcdTAwM2MvZGl2XHUwMDNlXHJcbiAgICAgICAgICAgICAgXHUwMDNjZGl2IGNsYXNzPVwiZmxleCBpdGVtcy1zdGFydCBnYXAtM1wiXHUwMDNlXHJcbiAgICAgICAgICAgICAgICBcdTAwM2NzdmcgY2xhc3M9XCJ3LTUgaC01IHRleHQtZ3JlZW4tNTAwIGZsZXgtc2hyaW5rLTAgbXQtMC41XCIgZmlsbD1cIm5vbmVcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCJcdTAwM2VcclxuICAgICAgICAgICAgICAgICAgXHUwMDNjcGF0aCBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLWxpbmVqb2luPVwicm91bmRcIiBzdHJva2Utd2lkdGg9XCIyXCIgZD1cIk01IDEzbDQgNEwxOSA3XCJcdTAwM2VcdTAwM2MvcGF0aFx1MDAzZVxyXG4gICAgICAgICAgICAgICAgXHUwMDNjL3N2Z1x1MDAzZVxyXG4gICAgICAgICAgICAgICAgXHUwMDNjZGl2IGNsYXNzPVwidGV4dC1zbSB0ZXh0LWdyYXktNzAwIGxlYWRpbmctcmVsYXhlZFwiXHUwMDNlXHJcbiAgICAgICAgICAgICAgICAgIFx1MDAzY3N0cm9uZyBjbGFzcz1cInRleHQtWyMxQzJDM0JdXCJcdTAwM2VFeHBlcnQgbWF0Y2hpbmcgb2YgeW91ciBuZWVkcyB0byBzdWl0YWJsZSBsZW5kZXJzXHUwMDNjL3N0cm9uZ1x1MDAzZSAtIDIwKyB5ZWFycyBleHBlcmllbmNlIGluIGNyZWRpdCBhc3Nlc3NtZW50XHJcbiAgICAgICAgICAgICAgICBcdTAwM2MvZGl2XHUwMDNlXHJcbiAgICAgICAgICAgICAgXHUwMDNjL2Rpdlx1MDAzZVxyXG4gICAgICAgICAgICAgIFx1MDAzY2RpdiBjbGFzcz1cImZsZXggaXRlbXMtc3RhcnQgZ2FwLTNcIlx1MDAzZVxyXG4gICAgICAgICAgICAgICAgXHUwMDNjc3ZnIGNsYXNzPVwidy01IGgtNSB0ZXh0LWdyZWVuLTUwMCBmbGV4LXNocmluay0wIG10LTAuNVwiIGZpbGw9XCJub25lXCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgdmlld0JveD1cIjAgMCAyNCAyNFwiXHUwMDNlXHJcbiAgICAgICAgICAgICAgICAgIFx1MDAzY3BhdGggc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS1saW5lam9pbj1cInJvdW5kXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIGQ9XCJNNSAxM2w0IDRMMTkgN1wiXHUwMDNlXHUwMDNjL3BhdGhcdTAwM2VcclxuICAgICAgICAgICAgICAgIFx1MDAzYy9zdmdcdTAwM2VcclxuICAgICAgICAgICAgICAgIFx1MDAzY2RpdiBjbGFzcz1cInRleHQtc20gdGV4dC1ncmF5LTcwMCBsZWFkaW5nLXJlbGF4ZWRcIlx1MDAzZVxyXG4gICAgICAgICAgICAgICAgICBcdTAwM2NzdHJvbmcgY2xhc3M9XCJ0ZXh0LVsjMUMyQzNCXVwiXHUwMDNlT25nb2luZyByZWxhdGlvbnNoaXAgbWFuYWdlbWVudCBhbmQgc3VwcG9ydFx1MDAzYy9zdHJvbmdcdTAwM2UgLSB3ZSBtYWludGFpbiByZWxhdGlvbnNoaXBzIHNvIHlvdSBkb24ndCBoYXZlIHRvXHJcbiAgICAgICAgICAgICAgICBcdTAwM2MvZGl2XHUwMDNlXHJcbiAgICAgICAgICAgICAgXHUwMDNjL2Rpdlx1MDAzZVxyXG4gICAgICAgICAgICBcdTAwM2MvZGl2XHUwMDNlXHJcbiAgICAgICAgICAgIFx1MDAzY2RpdiBjbGFzcz1cIm10LTZcIlx1MDAzZVxyXG4gICAgICAgICAgICAgIFx1MDAzY3AgY2xhc3M9XCJmb250LW1lZGl1bSB0ZXh0LVsjMUMyQzNCXSB0ZXh0LXNtIGxlYWRpbmctcmVsYXhlZFwiXHUwMDNlXHJcbiAgICAgICAgICAgICAgICBcdTAwM2NzdHJvbmdcdTAwM2VUaGUgQnJva2VyIEFkdmFudGFnZTpcdTAwM2Mvc3Ryb25nXHUwMDNlIFdoaWxlIGJhbmtzIGNhbiBvbmx5IG9mZmVyIHRoZWlyIG93biBwcm9kdWN0cywgd2UgY2FuIHNob3AgdGhlIGVudGlyZSBtYXJrZXQgdG8gZmluZCB0aGUgcmlnaHQgZml0IGZvciB5b3VyIHVuaXF1ZSBzaXR1YXRpb24uIFRoaXMgb2Z0ZW4gbWVhbnMgYmV0dGVyIHJhdGVzLCB0ZXJtcywgYW5kIGFwcHJvdmFsIGNoYW5jZXMgdGhhbiBnb2luZyBkaXJlY3QuXHJcbiAgICAgICAgICAgICAgXHUwMDNjL3BcdTAwM2VcclxuICAgICAgICAgICAgXHUwMDNjL2Rpdlx1MDAzZVxyXG4gICAgICAgICAgXHUwMDNjL2Rpdlx1MDAzZVxyXG4gICAgICAgIFx1MDAzYy9kaXZcdTAwM2VcclxuICAgICAgXHUwMDNjL2Rpdlx1MDAzZVxyXG4gICAgXHUwMDNjL3NlY3Rpb25cdTAwM2VcclxuXHJcbiAgICBcdTAwM2MhLS0gRmVlcyBhbmQgQ29tbWlzc2lvbnMgLS1cdTAwM2VcclxuICAgIFx1MDAzY3NlY3Rpb24gaWQ9XCJmZWVzLWNvbW1pc3Npb25zXCIgY2xhc3M9XCJweS0xMiBtZDpweS0xNlwiXHUwMDNlXHJcbiAgICAgIFx1MDAzY2RpdiBjbGFzcz1cIm14LWF1dG8gbWF4LXctNnhsIHB4LTQgc206cHgtNiBsZzpweC04XCJcdTAwM2VcclxuICAgICAgICBcdTAwM2NkaXYgY2xhc3M9XCJteC1hdXRvIG1heC13LTR4bFwiXHUwMDNlXHJcbiAgICAgICAgICBcdTAwM2NoMiBjbGFzcz1cInRleHQtNHhsIGZvbnQtYm9sZCB0cmFja2luZy10aWdodCB0ZXh0LXNsYXRlLTkwMCBtYi02XCJcdTAwM2VcclxuICAgICAgICAgICAgRmVlcyBhbmQgQ29tbWlzc2lvbnMgLSBDb21wbGV0ZSBUcmFuc3BhcmVuY3lcclxuICAgICAgICAgIFx1MDAzYy9oMlx1MDAzZVxyXG5cclxuICAgICAgICAgIFx1MDAzYyEtLSBSZXNpZGVudGlhbCBMZW5kaW5nIEJveCAtLVx1MDAzZVxyXG4gICAgICAgICAgXHUwMDNjZGl2IGNsYXNzPVwiYmctd2hpdGUgYm9yZGVyIGJvcmRlci1ncmF5LTIwMCByb3VuZGVkLXhsIHAtNCBzaGFkb3ctc20gbWItNFwiXHUwMDNlXHJcbiAgICAgICAgICAgIFx1MDAzY2RpdiBjbGFzcz1cImZsZXggaXRlbXMtY2VudGVyIG1iLTNcIlx1MDAzZVxyXG4gICAgICAgICAgICAgIFx1MDAzY2gzIGNsYXNzPVwidGV4dC14bCBmb250LW1lZGl1bSB0ZXh0LVsjMUMyQzNCXVwiXHUwMDNlUkVTSURFTlRJQUwgTEVORElOR1x1MDAzYy9oM1x1MDAzZVxyXG4gICAgICAgICAgICBcdTAwM2MvZGl2XHUwMDNlXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBcdTAwM2NkaXYgY2xhc3M9XCJ0ZXh0LWNlbnRlciBtYi0zXCJcdTAwM2VcclxuICAgICAgICAgICAgICBcdTAwM2NwIGNsYXNzPVwidGV4dC14bCBmb250LXNlbWlib2xkIHRleHQtWyMxQzJDM0JdXCJcdTAwM2VZT1UgUEFZIE5PVEhJTkcgRk9SIE9VUiBTRVJWSUNFXHUwMDNjL3BcdTAwM2VcclxuICAgICAgICAgICAgXHUwMDNjL2Rpdlx1MDAzZVxyXG5cclxuICAgICAgICAgICAgXHUwMDNjZGl2IGNsYXNzPVwidGV4dC1ncmF5LTcwMCBzcGFjZS15LTEgbWItM1wiXHUwMDNlXHJcbiAgICAgICAgICAgICAgXHUwMDNjZGl2IGNsYXNzPVwiZmxleCBpdGVtcy1jZW50ZXJcIlx1MDAzZVxyXG4gICAgICAgICAgICAgICAgXHUwMDNjc3ZnIGNsYXNzPVwiaC00IHctNCB0ZXh0LWdyZWVuLTUwMCBtci0yXCIgZmlsbD1cIm5vbmVcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCJcdTAwM2VcclxuICAgICAgICAgICAgICAgICAgXHUwMDNjcGF0aCBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLWxpbmVqb2luPVwicm91bmRcIiBzdHJva2Utd2lkdGg9XCIyXCIgZD1cIk01IDEzbDQgNEwxOSA3XCJcdTAwM2VcdTAwM2MvcGF0aFx1MDAzZVxyXG4gICAgICAgICAgICAgICAgXHUwMDNjL3N2Z1x1MDAzZVxyXG4gICAgICAgICAgICAgICAgXHUwMDNjc3BhbiBjbGFzcz1cInRleHQtc21cIlx1MDAzZU5vIHVwZnJvbnQgZmVlcyB0byB5b3VcdTAwM2Mvc3Bhblx1MDAzZVxyXG4gICAgICAgICAgICAgIFx1MDAzYy9kaXZcdTAwM2VcclxuICAgICAgICAgICAgICBcdTAwM2NkaXYgY2xhc3M9XCJmbGV4IGl0ZW1zLWNlbnRlclwiXHUwMDNlXHJcbiAgICAgICAgICAgICAgICBcdTAwM2NzdmcgY2xhc3M9XCJoLTQgdy00IHRleHQtZ3JlZW4tNTAwIG1yLTJcIiBmaWxsPVwibm9uZVwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIlx1MDAzZVxyXG4gICAgICAgICAgICAgICAgICBcdTAwM2NwYXRoIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2UtbGluZWpvaW49XCJyb3VuZFwiIHN0cm9rZS13aWR0aD1cIjJcIiBkPVwiTTUgMTNsNCA0TDE5IDdcIlx1MDAzZVx1MDAzYy9wYXRoXHUwMDNlXHJcbiAgICAgICAgICAgICAgICBcdTAwM2Mvc3ZnXHUwMDNlXHJcbiAgICAgICAgICAgICAgICBcdTAwM2NzcGFuIGNsYXNzPVwidGV4dC1zbVwiXHUwMDNlTm8gb25nb2luZyBzZXJ2aWNlIGNoYXJnZXMgdG8geW91XHUwMDNjL3NwYW5cdTAwM2VcclxuICAgICAgICAgICAgICBcdTAwM2MvZGl2XHUwMDNlXHJcbiAgICAgICAgICAgICAgXHUwMDNjZGl2IGNsYXNzPVwiZmxleCBpdGVtcy1jZW50ZXJcIlx1MDAzZVxyXG4gICAgICAgICAgICAgICAgXHUwMDNjc3ZnIGNsYXNzPVwiaC00IHctNCB0ZXh0LWdyZWVuLTUwMCBtci0yXCIgZmlsbD1cIm5vbmVcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCJcdTAwM2VcclxuICAgICAgICAgICAgICAgICAgXHUwMDNjcGF0aCBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLWxpbmVqb2luPVwicm91bmRcIiBzdHJva2Utd2lkdGg9XCIyXCIgZD1cIk01IDEzbDQgNEwxOSA3XCJcdTAwM2VcdTAwM2MvcGF0aFx1MDAzZVxyXG4gICAgICAgICAgICAgICAgXHUwMDNjL3N2Z1x1MDAzZVxyXG4gICAgICAgICAgICAgICAgXHUwMDNjc3BhbiBjbGFzcz1cInRleHQtc21cIlx1MDAzZU5vIGhpZGRlbiBjb3N0cyBvciBzdXJwcmlzZXNcdTAwM2Mvc3Bhblx1MDAzZVxyXG4gICAgICAgICAgICAgIFx1MDAzYy9kaXZcdTAwM2VcclxuICAgICAgICAgICAgICBcdTAwM2NkaXYgY2xhc3M9XCJmbGV4IGl0ZW1zLWNlbnRlclwiXHUwMDNlXHJcbiAgICAgICAgICAgICAgICBcdTAwM2NzdmcgY2xhc3M9XCJoLTQgdy00IHRleHQtZ3JlZW4tNTAwIG1yLTJcIiBmaWxsPVwibm9uZVwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIlx1MDAzZVxyXG4gICAgICAgICAgICAgICAgICBcdTAwM2NwYXRoIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2UtbGluZWpvaW49XCJyb3VuZFwiIHN0cm9rZS13aWR0aD1cIjJcIiBkPVwiTTUgMTNsNCA0TDE5IDdcIlx1MDAzZVx1MDAzYy9wYXRoXHUwMDNlXHJcbiAgICAgICAgICAgICAgICBcdTAwM2Mvc3ZnXHUwMDNlXHJcbiAgICAgICAgICAgICAgICBcdTAwM2NzcGFuIGNsYXNzPVwidGV4dC1zbVwiXHUwMDNlV2UncmUgcGFpZCBieSBsZW5kZXJzIGFmdGVyIHN1Y2Nlc3NmdWwgc2V0dGxlbWVudFx1MDAzYy9zcGFuXHUwMDNlXHJcbiAgICAgICAgICAgICAgXHUwMDNjL2Rpdlx1MDAzZVxyXG4gICAgICAgICAgICBcdTAwM2MvZGl2XHUwMDNlXHJcblxyXG4gICAgICAgICAgICBcdTAwM2NwIGNsYXNzPVwidGV4dC1ncmF5LTcwMCBmb250LW1lZGl1bSB0ZXh0LXNtXCJcdTAwM2VcclxuICAgICAgICAgICAgICBcdTAwM2NzdHJvbmdcdTAwM2VXaHkgdGhpcyB3b3JrczpcdTAwM2Mvc3Ryb25nXHUwMDNlIExlbmRlcnMgcGF5IHVzIGJlY2F1c2Ugd2UgYnJpbmcgdGhlbSBxdWFsaXR5IGFwcGxpY2F0aW9ucyBhbmQgc2F2ZSB0aGVtIG1hcmtldGluZyBjb3N0cy4gWW91IGdldCBleHBlcnQgc2VydmljZSBhdCBubyBjb3N0IHdoaWxlIGdhaW5pbmcgYWNjZXNzIHRvIGJldHRlciByYXRlcyBhbmQgcHJvZHVjdHMuXHJcbiAgICAgICAgICAgIFx1MDAzYy9wXHUwMDNlXHJcbiAgICAgICAgICBcdTAwM2MvZGl2XHUwMDNlXHJcblxyXG4gICAgICAgICAgXHUwMDNjIS0tIENvbW1lcmNpYWwgTGVuZGluZyBCb3ggLS1cdTAwM2VcclxuICAgICAgICAgIFx1MDAzY2RpdiBjbGFzcz1cImJnLXdoaXRlIGJvcmRlciBib3JkZXItZ3JheS0yMDAgcm91bmRlZC14bCBwLTQgc2hhZG93LXNtIG1iLTRcIlx1MDAzZVxyXG4gICAgICAgICAgICBcdTAwM2NkaXYgY2xhc3M9XCJmbGV4IGl0ZW1zLWNlbnRlciBtYi0zXCJcdTAwM2VcclxuICAgICAgICAgICAgICBcdTAwM2NoMyBjbGFzcz1cInRleHQteGwgZm9udC1tZWRpdW0gdGV4dC1bIzFDMkMzQl1cIlx1MDAzZUNPTU1FUkNJQUwgTEVORElOR1x1MDAzYy9oM1x1MDAzZVxyXG4gICAgICAgICAgICBcdTAwM2MvZGl2XHUwMDNlXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBcdTAwM2NkaXYgY2xhc3M9XCJ0ZXh0LWNlbnRlciBtYi0zXCJcdTAwM2VcclxuICAgICAgICAgICAgICBcdTAwM2NwIGNsYXNzPVwidGV4dC1zbSBmb250LW1lZGl1bSB0ZXh0LVsjMUMyQzNCXVwiXHUwMDNlQ29tcGxleCB0cmFuc2FjdGlvbnMgbWF5IGluY3VyIHdvcmsgZmVlcyBkaXNjbG9zZWQgdXBmcm9udC4gU2ltcGxlIGNvbW1lcmNpYWwgbG9hbnMgdHlwaWNhbGx5IGhhdmUgbm8gZmVlcyB0byB5b3UuXHUwMDNjL3BcdTAwM2VcclxuICAgICAgICAgICAgXHUwMDNjL2Rpdlx1MDAzZVxyXG5cclxuICAgICAgICAgICAgXHUwMDNjZGl2IGNsYXNzPVwidGV4dC1ncmF5LTcwMCBzcGFjZS15LTIgbWItM1wiXHUwMDNlXHJcbiAgICAgICAgICAgICAgXHUwMDNjZGl2IGNsYXNzPVwiZmxleCBpdGVtcy1zdGFydFwiXHUwMDNlXHJcbiAgICAgICAgICAgICAgICBcdTAwM2NzdmcgY2xhc3M9XCJoLTQgdy00IHRleHQtZ3JlZW4tNTAwIG1yLTIgbXQtMC41XCIgZmlsbD1cIm5vbmVcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCJcdTAwM2VcclxuICAgICAgICAgICAgICAgICAgXHUwMDNjcGF0aCBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLWxpbmVqb2luPVwicm91bmRcIiBzdHJva2Utd2lkdGg9XCIyXCIgZD1cIk01IDEzbDQgNEwxOSA3XCJcdTAwM2VcdTAwM2MvcGF0aFx1MDAzZVxyXG4gICAgICAgICAgICAgICAgXHUwMDNjL3N2Z1x1MDAzZVxyXG4gICAgICAgICAgICAgICAgXHUwMDNjc3BhbiBjbGFzcz1cInRleHQtc21cIlx1MDAzZVx1MDAzY3N0cm9uZ1x1MDAzZVNpbXBsZSBidXNpbmVzcyBsb2FuczpcdTAwM2Mvc3Ryb25nXHUwMDNlIFVzdWFsbHkgbm8gZmVlcyB0byB5b3UgKHBhaWQgYnkgbGVuZGVyIGxpa2UgcmVzaWRlbnRpYWwpXHUwMDNjL3NwYW5cdTAwM2VcclxuICAgICAgICAgICAgICBcdTAwM2MvZGl2XHUwMDNlXHJcbiAgICAgICAgICAgICAgXHUwMDNjZGl2IGNsYXNzPVwiZmxleCBpdGVtcy1zdGFydFwiXHUwMDNlXHJcbiAgICAgICAgICAgICAgICBcdTAwM2NzdmcgY2xhc3M9XCJoLTQgdy00IHRleHQtZ3JlZW4tNTAwIG1yLTIgbXQtMC41XCIgZmlsbD1cIm5vbmVcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCJcdTAwM2VcclxuICAgICAgICAgICAgICAgICAgXHUwMDNjcGF0aCBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLWxpbmVqb2luPVwicm91bmRcIiBzdHJva2Utd2lkdGg9XCIyXCIgZD1cIk01IDEzbDQgNEwxOSA3XCJcdTAwM2VcdTAwM2MvcGF0aFx1MDAzZVxyXG4gICAgICAgICAgICAgICAgXHUwMDNjL3N2Z1x1MDAzZVxyXG4gICAgICAgICAgICAgICAgXHUwMDNjc3BhbiBjbGFzcz1cInRleHQtc21cIlx1MDAzZVx1MDAzY3N0cm9uZ1x1MDAzZUNvbXBsZXggc3RydWN0dXJpbmcgd29yazpcdTAwM2Mvc3Ryb25nXHUwMDNlIE1heSBpbmN1ciBwcm9mZXNzaW9uYWwgc2VydmljZSBmZWVzIGRpc2Nsb3NlZCBiZWZvcmUgeW91IHByb2NlZWRcdTAwM2Mvc3Bhblx1MDAzZVxyXG4gICAgICAgICAgICAgIFx1MDAzYy9kaXZcdTAwM2VcclxuICAgICAgICAgICAgICBcdTAwM2NkaXYgY2xhc3M9XCJmbGV4IGl0ZW1zLXN0YXJ0XCJcdTAwM2VcclxuICAgICAgICAgICAgICAgIFx1MDAzY3N2ZyBjbGFzcz1cImgtNCB3LTQgdGV4dC1ncmVlbi01MDAgbXItMiBtdC0wLjVcIiBmaWxsPVwibm9uZVwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIlx1MDAzZVxyXG4gICAgICAgICAgICAgICAgICBcdTAwM2NwYXRoIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2UtbGluZWpvaW49XCJyb3VuZFwiIHN0cm9rZS13aWR0aD1cIjJcIiBkPVwiTTUgMTNsNCA0TDE5IDdcIlx1MDAzZVx1MDAzYy9wYXRoXHUwMDNlXHJcbiAgICAgICAgICAgICAgICBcdTAwM2Mvc3ZnXHUwMDNlXHJcbiAgICAgICAgICAgICAgICBcdTAwM2NzcGFuIGNsYXNzPVwidGV4dC1zbVwiXHUwMDNlXHUwMDNjc3Ryb25nXHUwMDNlQnVzaW5lc3MgYWNxdWlzaXRpb25zLCBzb3BoaXN0aWNhdGVkIHN0cnVjdHVyZXM6XHUwMDNjL3N0cm9uZ1x1MDAzZSBXb3JrIGZlZXMgbWF5IGFwcGx5IGR1ZSB0byBleHRlbnNpdmUgcHJlcGFyYXRpb24gcmVxdWlyZWRcdTAwM2Mvc3Bhblx1MDAzZVxyXG4gICAgICAgICAgICAgIFx1MDAzYy9kaXZcdTAwM2VcclxuICAgICAgICAgICAgICBcdTAwM2NkaXYgY2xhc3M9XCJmbGV4IGl0ZW1zLXN0YXJ0XCJcdTAwM2VcclxuICAgICAgICAgICAgICAgIFx1MDAzY3N2ZyBjbGFzcz1cImgtNCB3LTQgdGV4dC1ncmVlbi01MDAgbXItMiBtdC0wLjVcIiBmaWxsPVwibm9uZVwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIlx1MDAzZVxyXG4gICAgICAgICAgICAgICAgICBcdTAwM2NwYXRoIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2UtbGluZWpvaW49XCJyb3VuZFwiIHN0cm9rZS13aWR0aD1cIjJcIiBkPVwiTTUgMTNsNCA0TDE5IDdcIlx1MDAzZVx1MDAzYy9wYXRoXHUwMDNlXHJcbiAgICAgICAgICAgICAgICBcdTAwM2Mvc3ZnXHUwMDNlXHJcbiAgICAgICAgICAgICAgICBcdTAwM2NzcGFuIGNsYXNzPVwidGV4dC1zbVwiXHUwMDNlXHUwMDNjc3Ryb25nXHUwMDNlQWxsIGZlZXMgYWx3YXlzIGRpc2Nsb3NlZCB1cGZyb250XHUwMDNjL3N0cm9uZ1x1MDAzZSAtIG5vIHN1cnByaXNlcywgZXZlclx1MDAzYy9zcGFuXHUwMDNlXHJcbiAgICAgICAgICAgICAgXHUwMDNjL2Rpdlx1MDAzZVxyXG4gICAgICAgICAgICBcdTAwM2MvZGl2XHUwMDNlXHJcblxyXG4gICAgICAgICAgICBcdTAwM2NwIGNsYXNzPVwidGV4dC1ncmF5LTcwMCBmb250LW1lZGl1bSB0ZXh0LXNtXCJcdTAwM2VcclxuICAgICAgICAgICAgICBcdTAwM2NzdHJvbmdcdTAwM2VUaGUgZGlmZmVyZW5jZTpcdTAwM2Mvc3Ryb25nXHUwMDNlIE1vc3QgYnVzaW5lc3MgbG9hbnMgd29yayBsaWtlIGhvbWUgbG9hbnMgLSB3ZSdyZSBwYWlkIGJ5IHRoZSBsZW5kZXIuIE9ubHkgY29tcGxleCBkZWFscyByZXF1aXJpbmcgZXh0ZW5zaXZlIHN0cnVjdHVyaW5nIHdvcmsgbWF5IGluY3VyIGZlZXMsIHdoaWNoIHdlJ2xsIGRpc2N1c3MgY2xlYXJseSBiZWZvcmUgc3RhcnRpbmcuXHJcbiAgICAgICAgICAgIFx1MDAzYy9wXHUwMDNlXHJcbiAgICAgICAgICBcdTAwM2MvZGl2XHUwMDNlXHJcblxyXG4gICAgICAgICAgXHUwMDNjIS0tIEhvdyBXZSdyZSBBY3R1YWxseSBQYWlkIEJveCAtLVx1MDAzZVxyXG4gICAgICAgICAgXHUwMDNjZGl2IGNsYXNzPVwiYmctZ3JheS01MCBib3JkZXItbC00IGJvcmRlci1vcmFuZ2UtNTAwIHJvdW5kZWQtbWQgcC00IG1iLTRcIlx1MDAzZVxyXG4gICAgICAgICAgICBcdTAwM2NkaXYgY2xhc3M9XCJmbGV4IGl0ZW1zLXN0YXJ0IGdhcC0zXCJcdTAwM2VcclxuICAgICAgICAgICAgICBcdTAwM2NzdmcgY2xhc3M9XCJ3LTUgaC01IHRleHQtb3JhbmdlLTUwMCBmbGV4LXNocmluay0wXCIgZmlsbD1cIm5vbmVcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCJcdTAwM2VcclxuICAgICAgICAgICAgICAgIFx1MDAzY3BhdGggc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS1saW5lam9pbj1cInJvdW5kXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIGQ9XCJNMTMgMTZoLTF2LTRoLTFtMS00aC4wMU0yMSAxMmE5IDkgMCAxMS0xOCAwIDkgOSAwIDAxMTggMHpcIlx1MDAzZVx1MDAzYy9wYXRoXHUwMDNlXHJcbiAgICAgICAgICAgICAgXHUwMDNjL3N2Z1x1MDAzZVxyXG4gICAgICAgICAgICAgIFx1MDAzY2RpdiBjbGFzcz1cInRleHQtZ3JheS03MDAgbGVhZGluZy1yZWxheGVkXCJcdTAwM2VcclxuICAgICAgICAgICAgICAgIFx1MDAzY2gzIGNsYXNzPVwidGV4dC14bCBmb250LW1lZGl1bSB0ZXh0LVsjMUMyQzNCXSBtYi0zXCJcdTAwM2VIT1cgV0UnUkUgQUNUVUFMTFkgUEFJRFx1MDAzYy9oM1x1MDAzZVxyXG4gICAgICAgICAgICAgICAgXHUwMDNjZGl2IGNsYXNzPVwic3BhY2UteS0zXCJcdTAwM2VcclxuICAgICAgICAgICAgICAgIFx1MDAzY2Rpdlx1MDAzZVxyXG4gICAgICAgICAgICAgICAgICBcdTAwM2NoNCBjbGFzcz1cInRleHQtYmFzZSBmb250LXNlbWlib2xkIG1iLTFcIlx1MDAzZVVQRlJPTlQgQ09NTUlTU0lPTiAocGFpZCBieSBsZW5kZXIgYXQgc2V0dGxlbWVudCk6XHUwMDNjL2g0XHUwMDNlXHJcbiAgICAgICAgICAgICAgICAgIFx1MDAzY3VsIGNsYXNzPVwic3BhY2UteS0wLjUgbWwtMyB0ZXh0LXNtXCJcdTAwM2VcclxuICAgICAgICAgICAgICAgICAgICBcdTAwM2NsaVx1MDAzZeKAoiBSZXNpZGVudGlhbCBsb2FuczogVHlwaWNhbGx5IDAuNjAlIC0gMC43MCUgb2YgbG9hbiBhbW91bnRcdTAwM2MvbGlcdTAwM2VcclxuICAgICAgICAgICAgICAgICAgICBcdTAwM2NsaVx1MDAzZeKAoiBDb21tZXJjaWFsIGxvYW5zOiBUeXBpY2FsbHkgMC41MCUgLSAxLjAwJSBvZiBsb2FuIGFtb3VudFx1MDAzYy9saVx1MDAzZVxyXG4gICAgICAgICAgICAgICAgICBcdTAwM2MvdWxcdTAwM2VcclxuICAgICAgICAgICAgICAgIFx1MDAzYy9kaXZcdTAwM2VcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgXHUwMDNjZGl2XHUwMDNlXHJcbiAgICAgICAgICAgICAgICAgIFx1MDAzY2g0IGNsYXNzPVwidGV4dC1iYXNlIGZvbnQtc2VtaWJvbGQgbWItMVwiXHUwMDNlVFJBSUwgQ09NTUlTU0lPTiAocGFpZCBieSBsZW5kZXIgYW5udWFsbHkpOlx1MDAzYy9oNFx1MDAzZVxyXG4gICAgICAgICAgICAgICAgICBcdTAwM2N1bCBjbGFzcz1cInNwYWNlLXktMC41IG1sLTMgdGV4dC1zbVwiXHUwMDNlXHJcbiAgICAgICAgICAgICAgICAgICAgXHUwMDNjbGlcdTAwM2XigKIgUmVzaWRlbnRpYWwgbG9hbnM6IFR5cGljYWxseSAwLjE1JSAtIDAuMjAlIHBlciB5ZWFyIG9mIG91dHN0YW5kaW5nIGJhbGFuY2VcdTAwM2MvbGlcdTAwM2VcclxuICAgICAgICAgICAgICAgICAgICBcdTAwM2NsaVx1MDAzZeKAoiBDb21tZXJjaWFsIGxvYW5zOiBUeXBpY2FsbHkgMC4xMCUgLSAwLjI1JSBwZXIgeWVhciBvZiBvdXRzdGFuZGluZyBiYWxhbmNlXHUwMDNjL2xpXHUwMDNlXHJcbiAgICAgICAgICAgICAgICAgIFx1MDAzYy91bFx1MDAzZVxyXG4gICAgICAgICAgICAgICAgXHUwMDNjL2Rpdlx1MDAzZVxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBcdTAwM2NwIGNsYXNzPVwiZm9udC1tZWRpdW0gdGV4dC1bIzFDMkMzQl0gdGV4dC1zbSBtdC0zXCJcdTAwM2VcclxuICAgICAgICAgICAgICAgICAgXHUwMDNjc3Ryb25nXHUwMDNlSW1wb3J0YW50Olx1MDAzYy9zdHJvbmdcdTAwM2UgVGhlc2UgY29tbWlzc2lvbnMgYXJlIGJ1aWx0IGludG8gbGVuZGVyIGludGVyZXN0IHJhdGVzIHdoZXRoZXIgeW91IHVzZSBhIGJyb2tlciBvciBnbyBkaXJlY3QuIFRoZSByYXRlIHlvdSByZWNlaXZlIG9mdGVuIGJlYXRzIGdvaW5nIGRpcmVjdCBiZWNhdXNlIG9mIG91ciB2b2x1bWUgcmVsYXRpb25zaGlwcy5cclxuICAgICAgICAgICAgICAgIFx1MDAzYy9wXHUwMDNlXHJcbiAgICAgICAgICAgICAgXHUwMDNjL2Rpdlx1MDAzZVxyXG4gICAgICAgICAgICBcdTAwM2MvZGl2XHUwMDNlXHJcbiAgICAgICAgICAgIFx1MDAzYy9kaXZcdTAwM2VcclxuXHJcbiAgICAgICAgICBcdTAwM2MvZGl2XHUwMDNlXHJcblxyXG4gICAgICAgICAgXHUwMDNjIS0tIFdoeSBUaGlzIEJlbmVmaXRzIFlvdSBCb3ggLS1cdTAwM2VcclxuICAgICAgICAgIFx1MDAzY2RpdiBjbGFzcz1cImJnLWdyYXktNTAgYm9yZGVyIGJvcmRlci1ncmF5LTIwMCByb3VuZGVkLXhsIHAtNCBtYi00XCJcdTAwM2VcclxuICAgICAgICAgICAgXHUwMDNjZGl2IGNsYXNzPVwiZmxleCBpdGVtcy1jZW50ZXIgZ2FwLTMgdGV4dC0yeGwgZm9udC1tZWRpdW0gdGV4dC1bIzFDMkMzQl0gbWItNFwiXHUwMDNlXHJcbiAgICAgICAgICAgICAgXHUwMDNjc3ZnIGNsYXNzPVwidy02IGgtNiB0ZXh0LW9yYW5nZS01MDBcIiBmaWxsPVwibm9uZVwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIlx1MDAzZVxyXG4gICAgICAgICAgICAgICAgXHUwMDNjcGF0aCBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLWxpbmVqb2luPVwicm91bmRcIiBzdHJva2Utd2lkdGg9XCIyXCIgZD1cIk05IDVIN2EyIDIgMCAwMC0yIDJ2MTJhMiAyIDAgMDAyIDJoMTBhMiAyIDAgMDAyLTJWN2EyIDIgMCAwMC0yLTJoLTJNOSA1YTIgMiAwIDAwMiAyaDJhMiAyIDAgMDAyLTJNOSA1YTIgMiAwIDAxMi0yaDJhMiAyIDAgMDEyIDJtLTYgOWwyIDIgNC00XCJcdTAwM2VcdTAwM2MvcGF0aFx1MDAzZVxyXG4gICAgICAgICAgICAgIFx1MDAzYy9zdmdcdTAwM2VcclxuICAgICAgICAgICAgICBXSFkgVEhJUyBCRU5FRklUUyBZT1VcclxuICAgICAgICAgICAgXHUwMDNjL2Rpdlx1MDAzZVxyXG5cclxuICAgICAgICAgICAgXHUwMDNjZGl2IGNsYXNzPVwic3BhY2UteS0zIHRleHQtZ3JheS03MDBcIlx1MDAzZVxyXG4gICAgICAgICAgICAgIFx1MDAzY2RpdiBjbGFzcz1cImZsZXggaXRlbXMtc3RhcnQgZ2FwLTNcIlx1MDAzZVxyXG4gICAgICAgICAgICAgICAgXHUwMDNjc3ZnIGNsYXNzPVwidy01IGgtNSB0ZXh0LWdyZWVuLTUwMCBmbGV4LXNocmluay0wIG10LTAuNVwiIGZpbGw9XCJub25lXCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgdmlld0JveD1cIjAgMCAyNCAyNFwiXHUwMDNlXHJcbiAgICAgICAgICAgICAgICAgIFx1MDAzY3BhdGggc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS1saW5lam9pbj1cInJvdW5kXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIGQ9XCJNNSAxM2w0IDRMMTkgN1wiXHUwMDNlXHUwMDNjL3BhdGhcdTAwM2VcclxuICAgICAgICAgICAgICAgIFx1MDAzYy9zdmdcdTAwM2VcclxuICAgICAgICAgICAgICAgIFx1MDAzY2RpdiBjbGFzcz1cInRleHQtZ3JheS03MDAgbGVhZGluZy1yZWxheGVkIHRleHQtc21cIlx1MDAzZVxyXG4gICAgICAgICAgICAgICAgICBcdTAwM2NzdHJvbmcgY2xhc3M9XCJ0ZXh0LVsjMUMyQzNCXVwiXHUwMDNlTm8gY29zdCB0byBhY2Nlc3Mgb3VyIGV4cGVydGlzZVx1MDAzYy9zdHJvbmdcdTAwM2UgLSB5b3UgcGF5IHRoZSBzYW1lIHJhdGUgeW91J2QgZ2V0IGRpcmVjdCAob2Z0ZW4gYmV0dGVyKVxyXG4gICAgICAgICAgICAgICAgXHUwMDNjL2Rpdlx1MDAzZVxyXG4gICAgICAgICAgICAgIFx1MDAzYy9kaXZcdTAwM2VcclxuICAgICAgICAgICAgICBcdTAwM2NkaXYgY2xhc3M9XCJmbGV4IGl0ZW1zLXN0YXJ0IGdhcC0zXCJcdTAwM2VcclxuICAgICAgICAgICAgICAgIFx1MDAzY3N2ZyBjbGFzcz1cInctNSBoLTUgdGV4dC1ncmVlbi01MDAgZmxleC1zaHJpbmstMCBtdC0wLjVcIiBmaWxsPVwibm9uZVwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIlx1MDAzZVxyXG4gICAgICAgICAgICAgICAgICBcdTAwM2NwYXRoIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2UtbGluZWpvaW49XCJyb3VuZFwiIHN0cm9rZS13aWR0aD1cIjJcIiBkPVwiTTUgMTNsNCA0TDE5IDdcIlx1MDAzZVx1MDAzYy9wYXRoXHUwMDNlXHJcbiAgICAgICAgICAgICAgICBcdTAwM2Mvc3ZnXHUwMDNlXHJcbiAgICAgICAgICAgICAgICBcdTAwM2NkaXYgY2xhc3M9XCJ0ZXh0LWdyYXktNzAwIGxlYWRpbmctcmVsYXhlZCB0ZXh0LXNtXCJcdTAwM2VcclxuICAgICAgICAgICAgICAgICAgXHUwMDNjc3Ryb25nIGNsYXNzPVwidGV4dC1bIzFDMkMzQl1cIlx1MDAzZVdlIG5lZ290aWF0ZSBiZXR0ZXIgcmF0ZXMgdGhhbiB5b3UgY291bGQgZGlyZWN0XHUwMDNjL3N0cm9uZ1x1MDAzZSAtIHZvbHVtZSByZWxhdGlvbnNoaXBzIG1lYW4gYmV0dGVyIHRlcm1zXHJcbiAgICAgICAgICAgICAgICBcdTAwM2MvZGl2XHUwMDNlXHJcbiAgICAgICAgICAgICAgXHUwMDNjL2Rpdlx1MDAzZVxyXG4gICAgICAgICAgICAgIFx1MDAzY2RpdiBjbGFzcz1cImZsZXggaXRlbXMtc3RhcnQgZ2FwLTNcIlx1MDAzZVxyXG4gICAgICAgICAgICAgICAgXHUwMDNjc3ZnIGNsYXNzPVwidy01IGgtNSB0ZXh0LWdyZWVuLTUwMCBmbGV4LXNocmluay0wIG10LTAuNVwiIGZpbGw9XCJub25lXCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgdmlld0JveD1cIjAgMCAyNCAyNFwiXHUwMDNlXHJcbiAgICAgICAgICAgICAgICAgIFx1MDAzY3BhdGggc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS1saW5lam9pbj1cInJvdW5kXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIGQ9XCJNNSAxM2w0IDRMMTkgN1wiXHUwMDNlXHUwMDNjL3BhdGhcdTAwM2VcclxuICAgICAgICAgICAgICAgIFx1MDAzYy9zdmdcdTAwM2VcclxuICAgICAgICAgICAgICAgIFx1MDAzY2RpdiBjbGFzcz1cInRleHQtZ3JheS03MDAgbGVhZGluZy1yZWxheGVkIHRleHQtc21cIlx1MDAzZVxyXG4gICAgICAgICAgICAgICAgICBcdTAwM2NzdHJvbmcgY2xhc3M9XCJ0ZXh0LVsjMUMyQzNCXVwiXHUwMDNlUHJvZmVzc2lvbmFsIGFwcGxpY2F0aW9uIG1hbmFnZW1lbnQgaW5jbHVkZWRcdTAwM2Mvc3Ryb25nXHUwMDNlIC0gbm8gZXh0cmEgY29zdCBmb3IgZXhwZXJ0IHByZXBhcmF0aW9uXHJcbiAgICAgICAgICAgICAgICBcdTAwM2MvZGl2XHUwMDNlXHJcbiAgICAgICAgICAgICAgXHUwMDNjL2Rpdlx1MDAzZVxyXG4gICAgICAgICAgICAgIFx1MDAzY2RpdiBjbGFzcz1cImZsZXggaXRlbXMtc3RhcnQgZ2FwLTNcIlx1MDAzZVxyXG4gICAgICAgICAgICAgICAgXHUwMDNjc3ZnIGNsYXNzPVwidy01IGgtNSB0ZXh0LWdyZWVuLTUwMCBmbGV4LXNocmluay0wIG10LTAuNVwiIGZpbGw9XCJub25lXCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgdmlld0JveD1cIjAgMCAyNCAyNFwiXHUwMDNlXHJcbiAgICAgICAgICAgICAgICAgIFx1MDAzY3BhdGggc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS1saW5lam9pbj1cInJvdW5kXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIGQ9XCJNNSAxM2w0IDRMMTkgN1wiXHUwMDNlXHUwMDNjL3BhdGhcdTAwM2VcclxuICAgICAgICAgICAgICAgIFx1MDAzYy9zdmdcdTAwM2VcclxuICAgICAgICAgICAgICAgIFx1MDAzY2RpdiBjbGFzcz1cInRleHQtZ3JheS03MDAgbGVhZGluZy1yZWxheGVkIHRleHQtc21cIlx1MDAzZVxyXG4gICAgICAgICAgICAgICAgICBcdTAwM2NzdHJvbmcgY2xhc3M9XCJ0ZXh0LVsjMUMyQzNCXVwiXHUwMDNlT25nb2luZyBzdXBwb3J0IHRocm91Z2hvdXQgbG9hbiBsaWZlXHUwMDNjL3N0cm9uZ1x1MDAzZSAtIGFubnVhbCByZXZpZXdzLCByZWZpbmFuY2luZyBhZHZpY2UsIHBvcnRmb2xpbyBtYW5hZ2VtZW50XHJcbiAgICAgICAgICAgICAgICBcdTAwM2MvZGl2XHUwMDNlXHJcbiAgICAgICAgICAgICAgXHUwMDNjL2Rpdlx1MDAzZVxyXG4gICAgICAgICAgICAgIFx1MDAzY2RpdiBjbGFzcz1cImZsZXggaXRlbXMtc3RhcnQgZ2FwLTNcIlx1MDAzZVxyXG4gICAgICAgICAgICAgICAgXHUwMDNjc3ZnIGNsYXNzPVwidy01IGgtNSB0ZXh0LWdyZWVuLTUwMCBmbGV4LXNocmluay0wIG10LTAuNVwiIGZpbGw9XCJub25lXCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgdmlld0JveD1cIjAgMCAyNCAyNFwiXHUwMDNlXHJcbiAgICAgICAgICAgICAgICAgIFx1MDAzY3BhdGggc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS1saW5lam9pbj1cInJvdW5kXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIGQ9XCJNNSAxM2w0IDRMMTkgN1wiXHUwMDNlXHUwMDNjL3BhdGhcdTAwM2VcclxuICAgICAgICAgICAgICAgIFx1MDAzYy9zdmdcdTAwM2VcclxuICAgICAgICAgICAgICAgIFx1MDAzY2RpdiBjbGFzcz1cInRleHQtZ3JheS03MDAgbGVhZGluZy1yZWxheGVkIHRleHQtc21cIlx1MDAzZVxyXG4gICAgICAgICAgICAgICAgICBcdTAwM2NzdHJvbmcgY2xhc3M9XCJ0ZXh0LVsjMUMyQzNCXVwiXHUwMDNlTXVsdGlwbGUgbGVuZGVyIG9wdGlvbnMgdnMgc2luZ2xlIGRpcmVjdCBvcHRpb25cdTAwM2Mvc3Ryb25nXHUwMDNlIC0gY2hvaWNlIG1lYW5zIGJldHRlciBvdXRjb21lc1xyXG4gICAgICAgICAgICAgICAgXHUwMDNjL2Rpdlx1MDAzZVxyXG4gICAgICAgICAgICAgIFx1MDAzYy9kaXZcdTAwM2VcclxuICAgICAgICAgICAgXHUwMDNjL2Rpdlx1MDAzZVxyXG4gICAgICAgICAgXHUwMDNjL2Rpdlx1MDAzZVxyXG5cclxuICAgICAgICBcdTAwM2MvZGl2XHUwMDNlXHJcbiAgICAgIFx1MDAzYy9kaXZcdTAwM2VcclxuICAgIFx1MDAzYy9zZWN0aW9uXHUwMDNlXHJcblxyXG4gICAgXHUwMDNjIS0tIFlvdXIgUmlnaHRzIGFuZCBQcm90ZWN0aW9ucyAtLVx1MDAzZVxyXG4gICAgXHUwMDNjc2VjdGlvbiBpZD1cInJpZ2h0cy1wcm90ZWN0aW9uc1wiIGNsYXNzPVwicHktOCBtZDpweS0xMiBiZy1zbGF0ZS01MFwiXHUwMDNlXHJcbiAgICAgIFx1MDAzY2RpdiBjbGFzcz1cIm14LWF1dG8gbWF4LXctNnhsIHB4LTQgc206cHgtNiBsZzpweC04XCJcdTAwM2VcclxuICAgICAgICBcdTAwM2NkaXYgY2xhc3M9XCJteC1hdXRvIG1heC13LTR4bFwiXHUwMDNlXHJcbiAgICAgICAgICBcdTAwM2NoMiBjbGFzcz1cInRleHQtNHhsIGZvbnQtYm9sZCB0cmFja2luZy10aWdodCB0ZXh0LXNsYXRlLTkwMCBtYi02XCJcdTAwM2VcclxuICAgICAgICAgICAgWW91ciBSaWdodHMgYW5kIFByb3RlY3Rpb25zXHJcbiAgICAgICAgICBcdTAwM2MvaDJcdTAwM2VcclxuXHJcbiAgICAgICAgICBcdTAwM2MhLS0gUmlnaHRzIENhcmRzIC0tXHUwMDNlXHJcbiAgICAgICAgICBcdTAwM2NkaXYgY2xhc3M9XCJncmlkIGdyaWQtY29scy0xIG1kOmdyaWQtY29scy0yIGxnOmdyaWQtY29scy00IGdhcC00IG1iLThcIlx1MDAzZVxyXG4gICAgICAgICAgICBcdTAwM2MhLS0gQ2FyZCAxOiBCZXN0IEludGVyZXN0IER1dHkgLS1cdTAwM2VcclxuICAgICAgICAgICAgXHUwMDNjZGl2IGNsYXNzPVwiYmctd2hpdGUgYm9yZGVyLTIgYm9yZGVyLWdyYXktMjAwIHJvdW5kZWQteGwgcC00IHRleHQtY2VudGVyIGhvdmVyOmJvcmRlci1vcmFuZ2UtNTAwIGhvdmVyOi10cmFuc2xhdGUteS0xIGhvdmVyOnNoYWRvdy1sZyB0cmFuc2l0aW9uLWFsbCBmbGV4IGZsZXgtY29sIGp1c3RpZnktYmV0d2VlbiBoLWZ1bGxcIlx1MDAzZVxyXG4gICAgICAgICAgICAgIFx1MDAzY2RpdiBjbGFzcz1cImZsZXgtZ3Jvd1wiXHUwMDNlXHJcbiAgICAgICAgICAgICAgICBcdTAwM2NoMyBjbGFzcz1cInRleHQtYmFzZSBmb250LWJvbGQgdGV4dC1bIzFDMkMzQl0gbWItMlwiXHUwMDNlQkVTVCBJTlRFUkVTVCBEVVRZXHUwMDNjL2gzXHUwMDNlXHJcbiAgICAgICAgICAgICAgICBcdTAwM2NwIGNsYXNzPVwidGV4dC1zbSB0ZXh0LWdyYXktNjAwIGxlYWRpbmctcmVsYXhlZCBtYi0zXCJcdTAwM2VcclxuICAgICAgICAgICAgICAgICAgV2UgbXVzdCBhY3QgaW4geW91ciBiZXN0IGludGVyZXN0cyBhdCBhbGwgdGltZXMgLSBub3QgdGhlIGxlbmRlcidzIGludGVyZXN0cywgbm90IG91ciBvd24gaW50ZXJlc3RzLCBidXQgeW91cnMuIEV2ZXJ5IHJlY29tbWVuZGF0aW9uIG11c3QgYmUgc3VpdGFibGUgZm9yIHlvdXIgc2l0dWF0aW9uLCBldmVuIGlmIGl0IG1lYW5zIGxvd2VyIGNvbW1pc3Npb24gZm9yIHVzLlxyXG4gICAgICAgICAgICAgICAgXHUwMDNjL3BcdTAwM2VcclxuICAgICAgICAgICAgICBcdTAwM2MvZGl2XHUwMDNlXHJcbiAgICAgICAgICAgIFx1MDAzYy9kaXZcdTAwM2VcclxuXHJcbiAgICAgICAgICAgIFx1MDAzYyEtLSBDYXJkIDI6IFJpZ2h0IHRvIEluZm9ybWF0aW9uIC0tXHUwMDNlXHJcbiAgICAgICAgICAgIFx1MDAzY2RpdiBjbGFzcz1cImJnLXdoaXRlIGJvcmRlci0yIGJvcmRlci1ncmF5LTIwMCByb3VuZGVkLXhsIHAtNCB0ZXh0LWNlbnRlciBob3Zlcjpib3JkZXItb3JhbmdlLTUwMCBob3ZlcjotdHJhbnNsYXRlLXktMSBob3ZlcjpzaGFkb3ctbGcgdHJhbnNpdGlvbi1hbGwgZmxleCBmbGV4LWNvbCBqdXN0aWZ5LWJldHdlZW4gaC1mdWxsXCJcdTAwM2VcclxuICAgICAgICAgICAgICBcdTAwM2NkaXYgY2xhc3M9XCJmbGV4LWdyb3dcIlx1MDAzZVxyXG4gICAgICAgICAgICAgICAgXHUwMDNjaDMgY2xhc3M9XCJ0ZXh0LWJhc2UgZm9udC1ib2xkIHRleHQtWyMxQzJDM0JdIG1iLTJcIlx1MDAzZVJJR0hUIFRPIElORk9STUFUSU9OXHUwMDNjL2gzXHUwMDNlXHJcbiAgICAgICAgICAgICAgICBcdTAwM2NwIGNsYXNzPVwidGV4dC1zbSB0ZXh0LWdyYXktNjAwIGxlYWRpbmctcmVsYXhlZCBtYi0zXCJcdTAwM2VcclxuICAgICAgICAgICAgICAgICAgWW91IGNhbiByZXF1ZXN0IHNwZWNpZmljIGRldGFpbHMgYWJvdXQgY29tbWlzc2lvbnMsIHBheW1lbnRzLCBhbmQgb3VyIHJlbGF0aW9uc2hpcHMgd2l0aCBsZW5kZXJzIGF0IGFueSB0aW1lLiBGdWxsIHRyYW5zcGFyZW5jeSBhYm91dCBob3cgd2UncmUgcGFpZCBhbmQgYW55IHBvdGVudGlhbCBjb25mbGljdHMgb2YgaW50ZXJlc3QuXHJcbiAgICAgICAgICAgICAgICBcdTAwM2MvcFx1MDAzZVxyXG4gICAgICAgICAgICAgIFx1MDAzYy9kaXZcdTAwM2VcclxuICAgICAgICAgICAgXHUwMDNjL2Rpdlx1MDAzZVxyXG5cclxuICAgICAgICAgICAgXHUwMDNjIS0tIENhcmQgMzogQ29tcGxhaW50IFJlc29sdXRpb24gLS1cdTAwM2VcclxuICAgICAgICAgICAgXHUwMDNjZGl2IGNsYXNzPVwiYmctd2hpdGUgYm9yZGVyLTIgYm9yZGVyLWdyYXktMjAwIHJvdW5kZWQteGwgcC00IHRleHQtY2VudGVyIGhvdmVyOmJvcmRlci1vcmFuZ2UtNTAwIGhvdmVyOi10cmFuc2xhdGUteS0xIGhvdmVyOnNoYWRvdy1sZyB0cmFuc2l0aW9uLWFsbCBmbGV4IGZsZXgtY29sIGp1c3RpZnktYmV0d2VlbiBoLWZ1bGxcIlx1MDAzZVxyXG4gICAgICAgICAgICAgIFx1MDAzY2RpdiBjbGFzcz1cImZsZXgtZ3Jvd1wiXHUwMDNlXHJcbiAgICAgICAgICAgICAgICBcdTAwM2NoMyBjbGFzcz1cInRleHQtYmFzZSBmb250LWJvbGQgdGV4dC1bIzFDMkMzQl0gbWItMlwiXHUwMDNlQ09NUExBSU5UIFJFU09MVVRJT05cdTAwM2MvaDNcdTAwM2VcclxuICAgICAgICAgICAgICAgIFx1MDAzY3AgY2xhc3M9XCJ0ZXh0LXNtIHRleHQtZ3JheS02MDAgbGVhZGluZy1yZWxheGVkIG1iLTNcIlx1MDAzZVxyXG4gICAgICAgICAgICAgICAgICBJbnRlcm5hbCBkaXNwdXRlIHJlc29sdXRpb24gd2l0aGluIDMwIGRheXMsIHBsdXMgYWNjZXNzIHRvIGZyZWUgZXh0ZXJuYWwgZGlzcHV0ZSByZXNvbHV0aW9uLiBNdWx0aXBsZSBhdmVudWVzIHRvIHJlc29sdmUgYW55IGNvbmNlcm5zIHF1aWNrbHkgYW5kIGZhaXJseS5cclxuICAgICAgICAgICAgICAgIFx1MDAzYy9wXHUwMDNlXHJcbiAgICAgICAgICAgICAgXHUwMDNjL2Rpdlx1MDAzZVxyXG4gICAgICAgICAgICBcdTAwM2MvZGl2XHUwMDNlXHJcblxyXG4gICAgICAgICAgICBcdTAwM2MhLS0gQ2FyZCA0OiBDcmVkaXQgSW5mb3JtYXRpb24gUmlnaHRzIC0tXHUwMDNlXHJcbiAgICAgICAgICAgIFx1MDAzY2RpdiBjbGFzcz1cImJnLXdoaXRlIGJvcmRlci0yIGJvcmRlci1ncmF5LTIwMCByb3VuZGVkLXhsIHAtNCB0ZXh0LWNlbnRlciBob3Zlcjpib3JkZXItb3JhbmdlLTUwMCBob3ZlcjotdHJhbnNsYXRlLXktMSBob3ZlcjpzaGFkb3ctbGcgdHJhbnNpdGlvbi1hbGwgZmxleCBmbGV4LWNvbCBqdXN0aWZ5LWJldHdlZW4gaC1mdWxsXCJcdTAwM2VcclxuICAgICAgICAgICAgICBcdTAwM2NkaXYgY2xhc3M9XCJmbGV4LWdyb3dcIlx1MDAzZVxyXG4gICAgICAgICAgICAgICAgXHUwMDNjaDMgY2xhc3M9XCJ0ZXh0LWJhc2UgZm9udC1ib2xkIHRleHQtWyMxQzJDM0JdIG1iLTJcIlx1MDAzZUNSRURJVCBJTkZPUk1BVElPTiBSSUdIVFNcdTAwM2MvaDNcdTAwM2VcclxuICAgICAgICAgICAgICAgIFx1MDAzY3AgY2xhc3M9XCJ0ZXh0LXNtIHRleHQtZ3JheS02MDAgbGVhZGluZy1yZWxheGVkIG1iLTNcIlx1MDAzZVxyXG4gICAgICAgICAgICAgICAgICBBY2Nlc3MgYW5kIGNvcnJlY3QgeW91ciBjcmVkaXQgcmVwb3J0IGluZm9ybWF0aW9uLCB1bmRlcnN0YW5kIGhvdyBpdCdzIHVzZWQgaW4gYXBwbGljYXRpb25zLiBGdWxsIHRyYW5zcGFyZW5jeSBhYm91dCBjcmVkaXQgY2hlY2tzIGFuZCBob3cgeW91ciBpbmZvcm1hdGlvbiBpcyB1c2VkLlxyXG4gICAgICAgICAgICAgICAgXHUwMDNjL3BcdTAwM2VcclxuICAgICAgICAgICAgICBcdTAwM2MvZGl2XHUwMDNlXHJcbiAgICAgICAgICAgIFx1MDAzYy9kaXZcdTAwM2VcclxuICAgICAgICAgIFx1MDAzYy9kaXZcdTAwM2VcclxuXHJcbiAgICAgICAgICBcdTAwM2MhLS0gQUZDQSBFeHRlcm5hbCBEaXNwdXRlIFJlc29sdXRpb24gQm94IC0tXHUwMDNlXHJcbiAgICAgICAgICBcdTAwM2NkaXYgY2xhc3M9XCJiZy1ncmF5LTUwIGJvcmRlci1sLTQgYm9yZGVyLW9yYW5nZS01MDAgcm91bmRlZC1tZCBwLTRcIlx1MDAzZVxyXG4gICAgICAgICAgICBcdTAwM2NkaXYgY2xhc3M9XCJmbGV4IGl0ZW1zLXN0YXJ0IGdhcC0zXCJcdTAwM2VcclxuICAgICAgICAgICAgICBcdTAwM2NzdmcgY2xhc3M9XCJ3LTUgaC01IHRleHQtb3JhbmdlLTUwMCBmbGV4LXNocmluay0wXCIgZmlsbD1cIm5vbmVcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCJcdTAwM2VcclxuICAgICAgICAgICAgICAgIFx1MDAzY3BhdGggc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS1saW5lam9pbj1cInJvdW5kXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIGQ9XCJNMTMgMTZoLTF2LTRoLTFtMS00aC4wMU0yMSAxMmE5IDkgMCAxMS0xOCAwIDkgOSAwIDAxMTggMHpcIlx1MDAzZVx1MDAzYy9wYXRoXHUwMDNlXHJcbiAgICAgICAgICAgICAgXHUwMDNjL3N2Z1x1MDAzZVxyXG4gICAgICAgICAgICAgIFx1MDAzY2RpdiBjbGFzcz1cInRleHQtZ3JheS03MDAgbGVhZGluZy1yZWxheGVkXCJcdTAwM2VcclxuICAgICAgICAgICAgICAgIFx1MDAzY2gzIGNsYXNzPVwidGV4dC14bCBmb250LXNlbWlib2xkIHRleHQtWyMxQzJDM0JdIG1iLTNcIlx1MDAzZUVYVEVSTkFMIERJU1BVVEUgUkVTT0xVVElPTlx1MDAzYy9oM1x1MDAzZVxyXG5cclxuICAgICAgICAgICAgICAgIFx1MDAzY2RpdiBjbGFzcz1cIm1iLTRcIlx1MDAzZVxyXG4gICAgICAgICAgICAgICAgICBcdTAwM2NoNCBjbGFzcz1cInRleHQtYmFzZSBmb250LXNlbWlib2xkIHRleHQtWyMxQzJDM0JdIG1iLTNcIlx1MDAzZUF1c3RyYWxpYW4gRmluYW5jaWFsIENvbXBsYWludHMgQXV0aG9yaXR5IChBRkNBKVx1MDAzYy9oNFx1MDAzZVxyXG4gICAgICAgICAgICAgICAgICBcdTAwM2NkaXYgY2xhc3M9XCJncmlkIGdyaWQtY29scy0xIG1kOmdyaWQtY29scy0zIGdhcC0zIHRleHQtZ3JheS03MDBcIlx1MDAzZVxyXG4gICAgICAgICAgICAgICAgICAgIFx1MDAzY2RpdiBjbGFzcz1cImZsZXggaXRlbXMtY2VudGVyXCJcdTAwM2VcclxuICAgICAgICAgICAgICAgICAgICAgIFx1MDAzY3N2ZyBjbGFzcz1cImgtNCB3LTQgdGV4dC1vcmFuZ2UtNTAwIG1yLTJcIiBmaWxsPVwibm9uZVwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIlx1MDAzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcdTAwM2NwYXRoIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2UtbGluZWpvaW49XCJyb3VuZFwiIHN0cm9rZS13aWR0aD1cIjJcIiBkPVwiTTMgNWEyIDIgMCAwMTItMmgzLjI4YTEgMSAwIDAxLjk0OC42ODRsMS40OTggNC40OTNhMSAxIDAgMDEtLjUwMiAxLjIxbC0yLjI1NyAxLjEzYTExLjA0MiAxMS4wNDIgMCAwMDUuNTE2IDUuNTE2bDEuMTMtMi4yNTdhMSAxIDAgMDExLjIxLS41MDJsNC40OTMgMS40OThhMSAxIDAgMDEuNjg0Ljk0OVYxOWEyIDIgMCAwMS0yIDJoLTFDOS43MTYgMjEgMyAxNC4yODQgMyA2VjV6XCIgL1x1MDAzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgXHUwMDNjL3N2Z1x1MDAzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgXHUwMDNjc3BhbiBjbGFzcz1cInRleHQtc21cIlx1MDAzZVx1MDAzY3N0cm9uZ1x1MDAzZVBob25lOlx1MDAzYy9zdHJvbmdcdTAwM2UgMTgwMCA5MzEgNjc4XHUwMDNjL3NwYW5cdTAwM2VcclxuICAgICAgICAgICAgICAgICAgICBcdTAwM2MvZGl2XHUwMDNlXHJcbiAgICAgICAgICAgICAgICAgICAgXHUwMDNjZGl2IGNsYXNzPVwiZmxleCBpdGVtcy1jZW50ZXJcIlx1MDAzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgXHUwMDNjc3ZnIGNsYXNzPVwiaC00IHctNCB0ZXh0LW9yYW5nZS01MDAgbXItMlwiIGZpbGw9XCJub25lXCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgdmlld0JveD1cIjAgMCAyNCAyNFwiXHUwMDNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFx1MDAzY3BhdGggc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS1saW5lam9pbj1cInJvdW5kXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIGQ9XCJNMjEgMTJhOSA5IDAgMDEtOSA5bTktOWE5IDkgMCAwMC05LTltOSA5SDNtOSA5di05bTAtOXY5XCIgL1x1MDAzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgXHUwMDNjL3N2Z1x1MDAzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgXHUwMDNjc3BhbiBjbGFzcz1cInRleHQtc21cIlx1MDAzZVx1MDAzY3N0cm9uZ1x1MDAzZVdlYnNpdGU6XHUwMDNjL3N0cm9uZ1x1MDAzZSBhZmNhLm9yZy5hdVx1MDAzYy9zcGFuXHUwMDNlXHJcbiAgICAgICAgICAgICAgICAgICAgXHUwMDNjL2Rpdlx1MDAzZVxyXG4gICAgICAgICAgICAgICAgICAgIFx1MDAzY2RpdiBjbGFzcz1cImZsZXggaXRlbXMtY2VudGVyXCJcdTAwM2VcclxuICAgICAgICAgICAgICAgICAgICAgIFx1MDAzY3N2ZyBjbGFzcz1cImgtNCB3LTQgdGV4dC1vcmFuZ2UtNTAwIG1yLTJcIiBmaWxsPVwibm9uZVwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIlx1MDAzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcdTAwM2NwYXRoIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2UtbGluZWpvaW49XCJyb3VuZFwiIHN0cm9rZS13aWR0aD1cIjJcIiBkPVwiTTMgOGw3Ljg5IDQuMjZhMiAyIDAgMDAyLjIyIDBMMjEgOE01IDE5aDE0YTIgMiAwIDAwMi0yVjdhMiAyIDAgMDAtMi0ySDVhMiAyIDAgMDAtMiAydjEwYTIgMiAwIDAwMiAyelwiIC9cdTAwM2VcclxuICAgICAgICAgICAgICAgICAgICAgIFx1MDAzYy9zdmdcdTAwM2VcclxuICAgICAgICAgICAgICAgICAgICAgIFx1MDAzY3NwYW4gY2xhc3M9XCJ0ZXh0LXNtXCJcdTAwM2VcdTAwM2NzdHJvbmdcdTAwM2VFbWFpbDpcdTAwM2Mvc3Ryb25nXHUwMDNlIGluZm9AYWZjYS5vcmcuYXVcdTAwM2Mvc3Bhblx1MDAzZVxyXG4gICAgICAgICAgICAgICAgICAgIFx1MDAzYy9kaXZcdTAwM2VcclxuICAgICAgICAgICAgICAgICAgXHUwMDNjL2Rpdlx1MDAzZVxyXG4gICAgICAgICAgICAgICAgXHUwMDNjL2Rpdlx1MDAzZVxyXG5cclxuICAgICAgICAgICAgICAgIFx1MDAzY3AgY2xhc3M9XCJ0ZXh0LXNtIHRleHQtZ3JheS03MDAgbWItM1wiXHUwMDNlXHJcbiAgICAgICAgICAgICAgICAgIEFGQ0EgcHJvdmlkZXMgZnJlZSwgZmFpciBhbmQgaW5kZXBlbmRlbnQgZmluYW5jaWFsIHNlcnZpY2VzIGNvbXBsYWludCByZXNvbHV0aW9uLiBJZiB3ZSBjYW4ndCByZXNvbHZlIGEgY29uY2VybiBpbnRlcm5hbGx5IHdpdGhpbiAzMCBkYXlzLCBBRkNBIGNhbiBoZWxwIGF0IG5vIGNvc3QgdG8geW91LlxyXG4gICAgICAgICAgICAgICAgXHUwMDNjL3BcdTAwM2VcclxuXHJcbiAgICAgICAgICAgICAgICBcdTAwM2NwIGNsYXNzPVwiZm9udC1tZWRpdW0gdGV4dC1bIzFDMkMzQl0gdGV4dC1zbVwiXHUwMDNlXHJcbiAgICAgICAgICAgICAgICAgIFx1MDAzY3N0cm9uZ1x1MDAzZVlvdXIgcHJvdGVjdGlvbjpcdTAwM2Mvc3Ryb25nXHUwMDNlIEluZGVwZW5kZW50IG92ZXJzaWdodCBlbnN1cmVzIGZhaXIgdHJlYXRtZW50IGFuZCByZXNvbHV0aW9uIG9mIGFueSBkaXNwdXRlcy5cclxuICAgICAgICAgICAgICAgIFx1MDAzYy9wXHUwMDNlXHJcbiAgICAgICAgICAgICAgXHUwMDNjL2Rpdlx1MDAzZVxyXG4gICAgICAgICAgICBcdTAwM2MvZGl2XHUwMDNlXHJcbiAgICAgICAgICBcdTAwM2MvZGl2XHUwMDNlXHJcbiAgICAgICAgXHUwMDNjL2Rpdlx1MDAzZVxyXG4gICAgICBcdTAwM2MvZGl2XHUwMDNlXHJcbiAgICBcdTAwM2Mvc2VjdGlvblx1MDAzZVxyXG5cclxuICAgIFx1MDAzYyEtLSBIb3cgV2UgV29yayBUb2dldGhlciAtLVx1MDAzZVxyXG4gICAgXHUwMDNjc2VjdGlvbiBjbGFzcz1cInB5LTEyIG1kOnB5LTE2XCJcdTAwM2VcclxuICAgICAgXHUwMDNjZGl2IGNsYXNzPVwibXgtYXV0byBtYXgtdy02eGwgcHgtNCBzbTpweC02IGxnOnB4LThcIlx1MDAzZVxyXG4gICAgICAgIFx1MDAzY2RpdiBjbGFzcz1cIm14LWF1dG8gbWF4LXctNHhsXCJcdTAwM2VcclxuICAgICAgICAgIFx1MDAzY2gyIGNsYXNzPVwidGV4dC00eGwgZm9udC1ib2xkIHRyYWNraW5nLXRpZ2h0IHRleHQtc2xhdGUtOTAwIG1iLThcIlx1MDAzZVxyXG4gICAgICAgICAgICBIb3cgV2UgV29yayBUb2dldGhlclxyXG4gICAgICAgICAgXHUwMDNjL2gyXHUwMDNlXHJcblxyXG4gICAgICAgICAgXHUwMDNjIS0tIE91ciBQcm9jZXNzIEZsb3cgLS1cdTAwM2VcclxuICAgICAgICAgIFx1MDAzY2RpdiBjbGFzcz1cIm1iLTEyXCJcdTAwM2VcclxuICAgICAgICAgICAgXHUwMDNjaDMgY2xhc3M9XCJ0ZXh0LXhsIGZvbnQtYm9sZCB0ZXh0LXNsYXRlLTkwMCBtYi04IHRleHQtY2VudGVyXCJcdTAwM2VPVVIgNi1TVEVQIFBST0NFU1NcdTAwM2MvaDNcdTAwM2VcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIFx1MDAzY2RpdiBjbGFzcz1cImdyaWQgZ3JpZC1jb2xzLTEgbWQ6Z3JpZC1jb2xzLTIgbGc6Z3JpZC1jb2xzLTMgZ2FwLThcIlx1MDAzZVxyXG4gICAgICAgICAgICAgIFx1MDAzYyEtLSBTdGVwIDEgLS1cdTAwM2VcclxuICAgICAgICAgICAgICBcdTAwM2NkaXYgY2xhc3M9XCJ0ZXh0LWNlbnRlclwiXHUwMDNlXHJcbiAgICAgICAgICAgICAgICBcdTAwM2NkaXYgY2xhc3M9XCJmbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlciB3LTE2IGgtMTYgYmctb3JhbmdlLTEwMCByb3VuZGVkLWZ1bGwgbXgtYXV0byBtYi00XCJcdTAwM2VcclxuICAgICAgICAgICAgICAgICAgXHUwMDNjc3ZnIGNsYXNzPVwiaC04IHctOCB0ZXh0LW9yYW5nZS02MDBcIiBmaWxsPVwibm9uZVwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIlx1MDAzZVxyXG4gICAgICAgICAgICAgICAgICAgIFx1MDAzY3BhdGggc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS1saW5lam9pbj1cInJvdW5kXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIGQ9XCJNMyA1YTIgMiAwIDAxMi0yaDMuMjhhMSAxIDAgMDEuOTQ4LjY4NGwxLjQ5OCA0LjQ5M2ExIDEgMCAwMS0uNTAyIDEuMjFsLTIuMjU3IDEuMTNhMTEuMDQyIDExLjA0MiAwIDAwNS41MTYgNS41MTZsMS4xMy0yLjI1N2ExIDEgMCAwMTEuMjEtLjUwMmw0LjQ5MyAxLjQ5OGExIDEgMCAwMS42ODQuOTQ5VjE5YTIgMiAwIDAxLTIgMmgtMUM5LjcxNiAyMSAzIDE0LjI4NCAzIDZWNXpcIiAvXHUwMDNlXHJcbiAgICAgICAgICAgICAgICAgIFx1MDAzYy9zdmdcdTAwM2VcclxuICAgICAgICAgICAgICAgIFx1MDAzYy9kaXZcdTAwM2VcclxuICAgICAgICAgICAgICAgIFx1MDAzY2g0IGNsYXNzPVwidGV4dC1iYXNlIGZvbnQtc2VtaWJvbGQgdGV4dC1zbGF0ZS05MDAgbWItMlwiXHUwMDNlMS4gRElTQ09WRVJZIENBTExcdTAwM2MvaDRcdTAwM2VcclxuICAgICAgICAgICAgICAgIFx1MDAzY3AgY2xhc3M9XCJ0ZXh0LXNtIHRleHQtc2xhdGUtNjAwXCJcdTAwM2VVbmRlcnN0YW5kIHlvdXIgbmVlZHMsIGdvYWxzLCBhbmQgY3VycmVudCBzaXR1YXRpb25cdTAwM2MvcFx1MDAzZVxyXG4gICAgICAgICAgICAgIFx1MDAzYy9kaXZcdTAwM2VcclxuXHJcbiAgICAgICAgICAgICAgXHUwMDNjIS0tIFN0ZXAgMiAtLVx1MDAzZVxyXG4gICAgICAgICAgICAgIFx1MDAzY2RpdiBjbGFzcz1cInRleHQtY2VudGVyXCJcdTAwM2VcclxuICAgICAgICAgICAgICAgIFx1MDAzY2RpdiBjbGFzcz1cImZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIHctMTYgaC0xNiBiZy1vcmFuZ2UtMTAwIHJvdW5kZWQtZnVsbCBteC1hdXRvIG1iLTRcIlx1MDAzZVxyXG4gICAgICAgICAgICAgICAgICBcdTAwM2NzdmcgY2xhc3M9XCJoLTggdy04IHRleHQtb3JhbmdlLTYwMFwiIGZpbGw9XCJub25lXCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgdmlld0JveD1cIjAgMCAyNCAyNFwiXHUwMDNlXHJcbiAgICAgICAgICAgICAgICAgICAgXHUwMDNjcGF0aCBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLWxpbmVqb2luPVwicm91bmRcIiBzdHJva2Utd2lkdGg9XCIyXCIgZD1cIk0yMSAyMWwtNi02bTItNWE3IDcgMCAxMS0xNCAwIDcgNyAwIDAxMTQgMHpcIiAvXHUwMDNlXHJcbiAgICAgICAgICAgICAgICAgIFx1MDAzYy9zdmdcdTAwM2VcclxuICAgICAgICAgICAgICAgIFx1MDAzYy9kaXZcdTAwM2VcclxuICAgICAgICAgICAgICAgIFx1MDAzY2g0IGNsYXNzPVwidGV4dC1iYXNlIGZvbnQtc2VtaWJvbGQgdGV4dC1zbGF0ZS05MDAgbWItMlwiXHUwMDNlMi4gTEVOREVSIFNFQVJDSFx1MDAzYy9oNFx1MDAzZVxyXG4gICAgICAgICAgICAgICAgXHUwMDNjcCBjbGFzcz1cInRleHQtc20gdGV4dC1zbGF0ZS02MDBcIlx1MDAzZVJlc2VhcmNoIGFuZCBpZGVudGlmeSBiZXN0LWZpdCBsZW5kZXJzIGZvciB5b3VyIGFwcGxpY2F0aW9uXHUwMDNjL3BcdTAwM2VcclxuICAgICAgICAgICAgICBcdTAwM2MvZGl2XHUwMDNlXHJcblxyXG4gICAgICAgICAgICAgIFx1MDAzYyEtLSBTdGVwIDMgLS1cdTAwM2VcclxuICAgICAgICAgICAgICBcdTAwM2NkaXYgY2xhc3M9XCJ0ZXh0LWNlbnRlclwiXHUwMDNlXHJcbiAgICAgICAgICAgICAgICBcdTAwM2NkaXYgY2xhc3M9XCJmbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlciB3LTE2IGgtMTYgYmctb3JhbmdlLTEwMCByb3VuZGVkLWZ1bGwgbXgtYXV0byBtYi00XCJcdTAwM2VcclxuICAgICAgICAgICAgICAgICAgXHUwMDNjc3ZnIGNsYXNzPVwiaC04IHctOCB0ZXh0LW9yYW5nZS02MDBcIiBmaWxsPVwibm9uZVwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIlx1MDAzZVxyXG4gICAgICAgICAgICAgICAgICAgIFx1MDAzY3BhdGggc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS1saW5lam9pbj1cInJvdW5kXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIGQ9XCJNOSAxMmg2bS02IDRoNm0yIDVIN2EyIDIgMCAwMS0yLTJWNWEyIDIgMCAwMTItMmg1LjU4NmExIDEgMCAwMS43MDcuMjkzbDUuNDE0IDUuNDE0YTEgMSAwIDAxLjI5My43MDdWMTlhMiAyIDAgMDEtMiAyelwiIC9cdTAwM2VcclxuICAgICAgICAgICAgICAgICAgXHUwMDNjL3N2Z1x1MDAzZVxyXG4gICAgICAgICAgICAgICAgXHUwMDNjL2Rpdlx1MDAzZVxyXG4gICAgICAgICAgICAgICAgXHUwMDNjaDQgY2xhc3M9XCJ0ZXh0LWJhc2UgZm9udC1zZW1pYm9sZCB0ZXh0LXNsYXRlLTkwMCBtYi0yXCJcdTAwM2UzLiBET0NVTUVOVCBQUkVQQVJBVElPTlx1MDAzYy9oNFx1MDAzZVxyXG4gICAgICAgICAgICAgICAgXHUwMDNjcCBjbGFzcz1cInRleHQtc20gdGV4dC1zbGF0ZS02MDBcIlx1MDAzZVByb2Zlc3Npb25hbCBhcHBsaWNhdGlvbiBwcmVwYXJhdGlvbiB3aXRoIGFsbCByZXF1aXJlZCBkb2N1bWVudGF0aW9uXHUwMDNjL3BcdTAwM2VcclxuICAgICAgICAgICAgICBcdTAwM2MvZGl2XHUwMDNlXHJcblxyXG4gICAgICAgICAgICAgIFx1MDAzYyEtLSBTdGVwIDQgLS1cdTAwM2VcclxuICAgICAgICAgICAgICBcdTAwM2NkaXYgY2xhc3M9XCJ0ZXh0LWNlbnRlclwiXHUwMDNlXHJcbiAgICAgICAgICAgICAgICBcdTAwM2NkaXYgY2xhc3M9XCJmbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlciB3LTE2IGgtMTYgYmctb3JhbmdlLTEwMCByb3VuZGVkLWZ1bGwgbXgtYXV0byBtYi00XCJcdTAwM2VcclxuICAgICAgICAgICAgICAgICAgXHUwMDNjc3ZnIGNsYXNzPVwiaC04IHctOCB0ZXh0LW9yYW5nZS02MDBcIiBmaWxsPVwibm9uZVwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIlx1MDAzZVxyXG4gICAgICAgICAgICAgICAgICAgIFx1MDAzY3BhdGggc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS1saW5lam9pbj1cInJvdW5kXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIGQ9XCJNOSAxOXYtNmEyIDIgMCAwMC0yLTJINWEyIDIgMCAwMC0yIDJ2NmEyIDIgMCAwMDIgMmgyYTIgMiAwIDAwMi0yem0wIDBWOWEyIDIgMCAwMTItMmgyYTIgMiAwIDAxMiAydjEwbS02IDBhMiAyIDAgMDAyIDJoMmEyIDIgMCAwMDItMm0wIDBWNWEyIDIgMCAwMTItMmgyYTIgMiAwIDAxMiAydjE0YTIgMiAwIDAxLTIgMmgtMmEyIDIgMCAwMS0yLTJ6XCIgL1x1MDAzZVxyXG4gICAgICAgICAgICAgICAgICBcdTAwM2Mvc3ZnXHUwMDNlXHJcbiAgICAgICAgICAgICAgICBcdTAwM2MvZGl2XHUwMDNlXHJcbiAgICAgICAgICAgICAgICBcdTAwM2NoNCBjbGFzcz1cInRleHQtYmFzZSBmb250LXNlbWlib2xkIHRleHQtc2xhdGUtOTAwIG1iLTJcIlx1MDAzZTQuIFBSRVNFTlQgT1BUSU9OU1x1MDAzYy9oNFx1MDAzZVxyXG4gICAgICAgICAgICAgICAgXHUwMDNjcCBjbGFzcz1cInRleHQtc20gdGV4dC1zbGF0ZS02MDBcIlx1MDAzZUNsZWFyIHByZXNlbnRhdGlvbiBvZiBhdmFpbGFibGUgb3B0aW9ucyB3aXRoIHByb3MgYW5kIGNvbnNcdTAwM2MvcFx1MDAzZVxyXG4gICAgICAgICAgICAgIFx1MDAzYy9kaXZcdTAwM2VcclxuXHJcbiAgICAgICAgICAgICAgXHUwMDNjIS0tIFN0ZXAgNSAtLVx1MDAzZVxyXG4gICAgICAgICAgICAgIFx1MDAzY2RpdiBjbGFzcz1cInRleHQtY2VudGVyXCJcdTAwM2VcclxuICAgICAgICAgICAgICAgIFx1MDAzY2RpdiBjbGFzcz1cImZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIHctMTYgaC0xNiBiZy1vcmFuZ2UtMTAwIHJvdW5kZWQtZnVsbCBteC1hdXRvIG1iLTRcIlx1MDAzZVxyXG4gICAgICAgICAgICAgICAgICBcdTAwM2NzdmcgY2xhc3M9XCJoLTggdy04IHRleHQtb3JhbmdlLTYwMFwiIGZpbGw9XCJub25lXCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgdmlld0JveD1cIjAgMCAyNCAyNFwiXHUwMDNlXHJcbiAgICAgICAgICAgICAgICAgICAgXHUwMDNjcGF0aCBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLWxpbmVqb2luPVwicm91bmRcIiBzdHJva2Utd2lkdGg9XCIyXCIgZD1cIk0xMiAxOWw5IDItOS0xOC05IDE4IDktMnptMCAwdi04XCIgL1x1MDAzZVxyXG4gICAgICAgICAgICAgICAgICBcdTAwM2Mvc3ZnXHUwMDNlXHJcbiAgICAgICAgICAgICAgICBcdTAwM2MvZGl2XHUwMDNlXHJcbiAgICAgICAgICAgICAgICBcdTAwM2NoNCBjbGFzcz1cInRleHQtYmFzZSBmb250LXNlbWlib2xkIHRleHQtc2xhdGUtOTAwIG1iLTJcIlx1MDAzZTUuIFNVQk1JVCBBUFBMSUNBVElPTlNcdTAwM2MvaDRcdTAwM2VcclxuICAgICAgICAgICAgICAgIFx1MDAzY3AgY2xhc3M9XCJ0ZXh0LXNtIHRleHQtc2xhdGUtNjAwXCJcdTAwM2VQcm9mZXNzaW9uYWwgc3VibWlzc2lvbiB0byBjaG9zZW4gbGVuZGVycyB3aXRoIG9uZ29pbmcgbWFuYWdlbWVudFx1MDAzYy9wXHUwMDNlXHJcbiAgICAgICAgICAgICAgXHUwMDNjL2Rpdlx1MDAzZVxyXG5cclxuICAgICAgICAgICAgICBcdTAwM2MhLS0gU3RlcCA2IC0tXHUwMDNlXHJcbiAgICAgICAgICAgICAgXHUwMDNjZGl2IGNsYXNzPVwidGV4dC1jZW50ZXJcIlx1MDAzZVxyXG4gICAgICAgICAgICAgICAgXHUwMDNjZGl2IGNsYXNzPVwiZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXIgdy0xNiBoLTE2IGJnLW9yYW5nZS0xMDAgcm91bmRlZC1mdWxsIG14LWF1dG8gbWItNFwiXHUwMDNlXHJcbiAgICAgICAgICAgICAgICAgIFx1MDAzY3N2ZyBjbGFzcz1cImgtOCB3LTggdGV4dC1vcmFuZ2UtNjAwXCIgZmlsbD1cIm5vbmVcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCJcdTAwM2VcclxuICAgICAgICAgICAgICAgICAgICBcdTAwM2NwYXRoIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2UtbGluZWpvaW49XCJyb3VuZFwiIHN0cm9rZS13aWR0aD1cIjJcIiBkPVwiTTE1IDdhMiAyIDAgMDEyIDJtNCAwYTYgNiAwIDAxLTcuNzQzIDUuNzQzTDExIDE3SDl2Mkg3djJINGExIDEgMCAwMS0xLTF2LTIuNTg2YTEgMSAwIDAxLjI5My0uNzA3bDUuOTY0LTUuOTY0QTYgNiAwIDExMjEgOXpcIiAvXHUwMDNlXHJcbiAgICAgICAgICAgICAgICAgIFx1MDAzYy9zdmdcdTAwM2VcclxuICAgICAgICAgICAgICAgIFx1MDAzYy9kaXZcdTAwM2VcclxuICAgICAgICAgICAgICAgIFx1MDAzY2g0IGNsYXNzPVwidGV4dC1iYXNlIGZvbnQtc2VtaWJvbGQgdGV4dC1zbGF0ZS05MDAgbWItMlwiXHUwMDNlNi4gU0VUVExFTUVOVCBTVVBQT1JUXHUwMDNjL2g0XHUwMDNlXHJcbiAgICAgICAgICAgICAgICBcdTAwM2NwIGNsYXNzPVwidGV4dC1zbSB0ZXh0LXNsYXRlLTYwMFwiXHUwMDNlQ29vcmRpbmF0ZSBzZXR0bGVtZW50IHByb2Nlc3MgYW5kIG9uZ29pbmcgcG9ydGZvbGlvIG1hbmFnZW1lbnRcdTAwM2MvcFx1MDAzZVxyXG4gICAgICAgICAgICAgIFx1MDAzYy9kaXZcdTAwM2VcclxuICAgICAgICAgICAgXHUwMDNjL2Rpdlx1MDAzZVxyXG4gICAgICAgICAgXHUwMDNjL2Rpdlx1MDAzZVxyXG5cclxuICAgICAgICBcdTAwM2MvZGl2XHUwMDNlXHJcbiAgICAgIFx1MDAzYy9kaXZcdTAwM2VcclxuICAgIFx1MDAzYy9zZWN0aW9uXHUwMDNlXHJcblxyXG5cclxuICAgIFx1MDAzYyEtLSBGb290ZXIgTmF2aWdhdGlvbiAtLVx1MDAzZVxyXG4gICAgXHUwMDNjc2VjdGlvbiBjbGFzcz1cImZvb3Rlci1uYXYgYmctZ3JheS01MCBweS0xMCBib3JkZXItdCBib3JkZXItZ3JheS0yMDAgdGV4dC1jZW50ZXJcIlx1MDAzZVxyXG4gICAgICAgIFx1MDAzY2RpdiBjbGFzcz1cImNvbnRhaW5lciBteC1hdXRvIG1heC13LTR4bCBweC02XCJcdTAwM2VcclxuICAgICAgICAgICAgXHUwMDNjZGl2IGNsYXNzPVwidGV4dC1sZyBmb250LXNlbWlib2xkIHRleHQtWyMxQzJDM0JdIG1iLTRcIlx1MDAzZVxyXG4gICAgICAgICAgICAgICAgUmVsYXRlZCBDb21wbGlhbmNlIFBhZ2VzXHJcbiAgICAgICAgICAgIFx1MDAzYy9kaXZcdTAwM2VcclxuICAgICAgICAgICAgXHUwMDNjZGl2IGNsYXNzPVwiZm9vdGVyLWxpbmtzIGZsZXgganVzdGlmeS1jZW50ZXIgZ2FwLTYgbWItNiBmbGV4LXdyYXBcIlx1MDAzZVxyXG4gICAgICAgICAgICAgICAgXHUwMDNjYSBocmVmPVwiL3ByaXZhY3ktcG9saWN5XCIgY2xhc3M9XCJmb290ZXItbGluayB0ZXh0LWdyYXktNjAwIGhvdmVyOnRleHQtb3JhbmdlLTUwMCBob3Zlcjp1bmRlcmxpbmUgdHJhbnNpdGlvbi1hbGxcIlx1MDAzZVByaXZhY3kgUG9saWN5XHUwMDNjL2FcdTAwM2VcclxuICAgICAgICAgICAgICAgIFx1MDAzY3NwYW4gY2xhc3M9XCJmb290ZXItZGl2aWRlciB0ZXh0LWdyYXktMzAwXCJcdTAwM2V8XHUwMDNjL3NwYW5cdTAwM2VcclxuICAgICAgICAgICAgICAgIFx1MDAzY2EgaHJlZj1cIi9kYXRhLXNlY3VyaXR5LXBvbGljeVwiIGNsYXNzPVwiZm9vdGVyLWxpbmsgdGV4dC1ncmF5LTYwMCBob3Zlcjp0ZXh0LW9yYW5nZS01MDAgaG92ZXI6dW5kZXJsaW5lIHRyYW5zaXRpb24tYWxsXCJcdTAwM2VEYXRhIFNlY3VyaXR5IFBvbGljeVx1MDAzYy9hXHUwMDNlXHJcbiAgICAgICAgICAgICAgICBcdTAwM2NzcGFuIGNsYXNzPVwiZm9vdGVyLWRpdmlkZXIgdGV4dC1ncmF5LTMwMFwiXHUwMDNlfFx1MDAzYy9zcGFuXHUwMDNlXHJcbiAgICAgICAgICAgICAgICBcdTAwM2NhIGhyZWY9XCIvdGVybXMtb2YtdXNlXCIgY2xhc3M9XCJmb290ZXItbGluayB0ZXh0LWdyYXktNjAwIGhvdmVyOnRleHQtb3JhbmdlLTUwMCBob3Zlcjp1bmRlcmxpbmUgdHJhbnNpdGlvbi1hbGxcIlx1MDAzZVdlYnNpdGUgVGVybXNcdTAwM2MvYVx1MDAzZVxyXG4gICAgICAgICAgICBcdTAwM2MvZGl2XHUwMDNlXHJcbiAgICAgICAgICAgIFx1MDAzY2EgaHJlZj1cIiNoZXJvXCIgY2xhc3M9XCJiYWNrLXRvLXRvcCBpbmxpbmUtZmxleCBpdGVtcy1jZW50ZXIgZ2FwLTIgdGV4dC1vcmFuZ2UtNTAwIGZvbnQtbWVkaXVtIGhvdmVyOi10cmFuc2xhdGUteS0xIHRyYW5zaXRpb24tYWxsXCJcdTAwM2VcclxuICAgICAgICAgICAgICAgIFx1MDAzY3N2ZyBjbGFzcz1cImJhY2stdG8tdG9wLWljb24gdy01IGgtNVwiIGZpbGw9XCJub25lXCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgdmlld0JveD1cIjAgMCAyNCAyNFwiXHUwMDNlXHJcbiAgICAgICAgICAgICAgICAgICAgXHUwMDNjcGF0aCBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLWxpbmVqb2luPVwicm91bmRcIiBzdHJva2Utd2lkdGg9XCIyXCIgZD1cIk01IDEwbDctN20wIDBsNyA3bS03LTd2MThcIlx1MDAzZVx1MDAzYy9wYXRoXHUwMDNlXHJcbiAgICAgICAgICAgICAgICBcdTAwM2Mvc3ZnXHUwMDNlXHJcbiAgICAgICAgICAgICAgICBSZXR1cm4gdG8gVG9wXHJcbiAgICAgICAgICAgIFx1MDAzYy9hXHUwMDNlXHJcbiAgICAgICAgXHUwMDNjL2Rpdlx1MDAzZVxyXG4gICAgXHUwMDNjL3NlY3Rpb25cdTAwM2VcclxuICBcdTAwM2MvbWFpblx1MDAzZVxyXG5cdTAwM2MvTGF5b3V0XHUwMDNlXHJcblxyXG5cdTAwM2NzdHlsZVx1MDAzZVxyXG4gIC50cnVzdC1iYWRnZTpob3ZlciB7XHJcbiAgICBAYXBwbHkgYm9yZGVyLWdyYXktMzAwIHNoYWRvdy1tZCB0cmFuc2Zvcm0gc2NhbGUtMTA1O1xyXG4gICAgdHJhbnNpdGlvbjogYWxsIDAuMnMgZWFzZS1pbi1vdXQ7XHJcbiAgfVxyXG5cdTAwM2Mvc3R5bGVcdTAwM2VcclxuXHJcblx1MDAzY3NjcmlwdFx1MDAzZVxyXG4gIC8vIFNtb290aCBzY3JvbGwgZm9yIGFuY2hvciBsaW5rc1xyXG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2FbaHJlZl49XCIjXCJdJykuZm9yRWFjaChhbmNob3IgPVx1MDAzZSB7XHJcbiAgICBhbmNob3IuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgIGNvbnN0IHRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy5nZXRBdHRyaWJ1dGUoJ2hyZWYnKSk7XHJcbiAgICAgIGlmICh0YXJnZXQpIHtcclxuICAgICAgICB0YXJnZXQuc2Nyb2xsSW50b1ZpZXcoe1xyXG4gICAgICAgICAgYmVoYXZpb3I6ICdzbW9vdGgnLFxyXG4gICAgICAgICAgYmxvY2s6ICdzdGFydCdcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfSk7XHJcblx1MDAzYy9zY3JpcHRcdTAwM2UiXSwgIm1hcHBpbmdzIjogIkFBa3dCQSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2xDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRTtBQUM5RCxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUU7QUFDbEQsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN4QixNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdEUsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO0FBQ2xCLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUM5QixVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUM1QixVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3ZCLFFBQVEsQ0FBQyxDQUFDO0FBQ1YsTUFBTTtBQUNOLElBQUksQ0FBQyxDQUFDO0FBQ04sRUFBRSxDQUFDLENBQUM7QUFBQTsiLCAibmFtZXMiOiBbXSB9"],"names":["anchor","e","target"],"mappings":"uiBAmwBE,SAAS,iBAAiB,cAAc,EAAE,QAAQA,GAAU,CAC1DA,EAAO,iBAAiB,QAAS,SAAUC,EAAG,CAC5CA,EAAE,eAAA,EACF,MAAMC,EAAS,SAAS,cAAc,KAAK,aAAa,MAAM,CAAC,EAC3DA,GACFA,EAAO,eAAe,CACpB,SAAU,SACV,MAAO,QACR,CAEL,CAAC,CACH,CAAC"}