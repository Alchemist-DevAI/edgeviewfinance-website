{"version":3,"file":"terms-of-use.astro_astro_type_script_index_0_lang.Da-XmpV5.js","sources":["../../../src/pages/terms-of-use.astro?astro&type=script&index=0&lang.ts"],"sourcesContent":["        // Smooth scroll for anchor links\r\n        document.querySelectorAll('a[href^=\"#\"]').forEach(anchor => {\r\n            anchor.addEventListener('click', function (e) {\r\n                e.preventDefault();\r\n                const target = document.querySelector(this.getAttribute('href'));\r\n                if (target) {\r\n                    target.scrollIntoView({\r\n                        behavior: 'smooth',\r\n                        block: 'start'\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    \n\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"],"names":["anchor","e","target"],"mappings":"uiBAo4BQ,SAAS,iBAAiB,cAAc,EAAE,QAAQA,GAAU,CACxDA,EAAO,iBAAiB,QAAS,SAAUC,EAAG,CAC1CA,EAAE,eAAA,EACF,MAAMC,EAAS,SAAS,cAAc,KAAK,aAAa,MAAM,CAAC,EAC3DA,GACAA,EAAO,eAAe,CAClB,SAAU,SACV,MAAO,QACV,CAET,CAAC,CACL,CAAC"}