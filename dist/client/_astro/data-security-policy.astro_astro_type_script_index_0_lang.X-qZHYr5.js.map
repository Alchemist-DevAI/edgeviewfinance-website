{"version":3,"file":"data-security-policy.astro_astro_type_script_index_0_lang.X-qZHYr5.js","sources":["../../../src/pages/data-security-policy.astro?astro&type=script&index=0&lang.ts"],"sourcesContent":["        // Smooth scroll for anchor links\r\n        document.querySelectorAll('a[href^=\"#\"]').forEach(anchor => {\r\n            anchor.addEventListener('click', function (e) {\r\n                e.preventDefault();\r\n                const target = document.querySelector(this.getAttribute('href'));\r\n                if (target) {\r\n                    target.scrollIntoView({\r\n                        behavior: 'smooth',\r\n                        block: 'start'\r\n                    });\r\n                }\r\n            });\r\n        });\r\n\r\n        // Highlight active section in navigation\r\n        const observerOptions = {\r\n            root: null,\r\n            rootMargin: '-20% 0px -70% 0px',\r\n            threshold: 0\r\n        };\r\n\r\n        const observer = new IntersectionObserver((entries) => {\r\n            entries.forEach(entry => {\r\n                if (entry.isIntersecting) {\r\n                    // Remove active class from all nav links\r\n                    document.querySelectorAll('.quick-nav-pill').forEach(link => {\r\n                        link.classList.remove('bg-orange-500', 'text-white', 'border-orange-500');\r\n                        link.classList.add('bg-white', 'text-gray-700', 'border-gray-300');\r\n                    });\r\n                    \r\n                    // Add active class to current section's nav link\r\n                    const activeLink = document.querySelector(`a[href=\"#${entry.target.id}\"]`);\r\n                    if (activeLink) {\r\n                        activeLink.classList.remove('bg-white', 'text-gray-700', 'border-gray-300');\r\n                        activeLink.classList.add('bg-orange-500', 'text-white', 'border-orange-500');\r\n                    }\r\n                }\r\n            });\r\n        }, observerOptions);\r\n\r\n        // Observe all sections\r\n        document.querySelectorAll('section[id]').forEach(section => {\r\n            observer.observe(section);\r\n        });\r\n    \n\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"],"names":["anchor","e","target","observerOptions","observer","entries","entry","link","activeLink","section"],"mappings":"uiBAygCQ,SAAS,iBAAiB,cAAc,EAAE,QAAQA,GAAU,CACxDA,EAAO,iBAAiB,QAAS,SAAUC,EAAG,CAC1CA,EAAE,eAAA,EACF,MAAMC,EAAS,SAAS,cAAc,KAAK,aAAa,MAAM,CAAC,EAC3DA,GACAA,EAAO,eAAe,CAClB,SAAU,SACV,MAAO,QACV,CAET,CAAC,CACL,CAAC,EAGD,MAAMC,EAAkB,CACpB,KAAM,KACN,WAAY,oBACZ,UAAW,CACf,EAEMC,EAAW,IAAI,qBAAsBC,GAAY,CACnDA,EAAQ,QAAQC,GAAS,CACrB,GAAIA,EAAM,eAAgB,CAEtB,SAAS,iBAAiB,iBAAiB,EAAE,QAAQC,GAAQ,CACzDA,EAAK,UAAU,OAAO,gBAAiB,aAAc,mBAAmB,EACxEA,EAAK,UAAU,IAAI,WAAY,gBAAiB,iBAAiB,CACrE,CAAC,EAGD,MAAMC,EAAa,SAAS,cAAc,YAAYF,EAAM,OAAO,EAAE,IAAI,EACrEE,IACAA,EAAW,UAAU,OAAO,WAAY,gBAAiB,iBAAiB,EAC1EA,EAAW,UAAU,IAAI,gBAAiB,aAAc,mBAAmB,EAEnF,CACJ,CAAC,CACL,EAAGL,CAAe,EAGlB,SAAS,iBAAiB,aAAa,EAAE,QAAQM,GAAW,CACxDL,EAAS,QAAQK,CAAO,CAC5B,CAAC"}